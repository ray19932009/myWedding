#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="myWedding")]
public partial class FactoryDBDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region 擴充性方法定義
  partial void OnCreated();
  partial void InserttAnswerPrice(tAnswerPrice instance);
  partial void UpdatetAnswerPrice(tAnswerPrice instance);
  partial void DeletetAnswerPrice(tAnswerPrice instance);
  partial void InserttStores(tStores instance);
  partial void UpdatetStores(tStores instance);
  partial void DeletetStores(tStores instance);
  partial void InserttAskPrice(tAskPrice instance);
  partial void UpdatetAskPrice(tAskPrice instance);
  partial void DeletetAskPrice(tAskPrice instance);
  partial void InserttAvailableTime(tAvailableTime instance);
  partial void UpdatetAvailableTime(tAvailableTime instance);
  partial void DeletetAvailableTime(tAvailableTime instance);
  partial void InserttChat(tChat instance);
  partial void UpdatetChat(tChat instance);
  partial void DeletetChat(tChat instance);
  partial void InserttChatReply(tChatReply instance);
  partial void UpdatetChatReply(tChatReply instance);
  partial void DeletetChatReply(tChatReply instance);
  partial void InserttCity(tCity instance);
  partial void UpdatetCity(tCity instance);
  partial void DeletetCity(tCity instance);
  partial void InserttDiscussion(tDiscussion instance);
  partial void UpdatetDiscussion(tDiscussion instance);
  partial void DeletetDiscussion(tDiscussion instance);
  partial void InserttDiscussionReply(tDiscussionReply instance);
  partial void UpdatetDiscussionReply(tDiscussionReply instance);
  partial void DeletetDiscussionReply(tDiscussionReply instance);
  partial void InserttEvaluation(tEvaluation instance);
  partial void UpdatetEvaluation(tEvaluation instance);
  partial void DeletetEvaluation(tEvaluation instance);
  partial void InserttFate(tFate instance);
  partial void UpdatetFate(tFate instance);
  partial void DeletetFate(tFate instance);
  partial void InserttGalleryPhoto(tGalleryPhoto instance);
  partial void UpdatetGalleryPhoto(tGalleryPhoto instance);
  partial void DeletetGalleryPhoto(tGalleryPhoto instance);
  partial void InserttLetter(tLetter instance);
  partial void UpdatetLetter(tLetter instance);
  partial void DeletetLetter(tLetter instance);
  partial void InserttManual(tManual instance);
  partial void UpdatetManual(tManual instance);
  partial void DeletetManual(tManual instance);
  partial void InserttMember(tMember instance);
  partial void UpdatetMember(tMember instance);
  partial void DeletetMember(tMember instance);
  partial void InserttPush(tPush instance);
  partial void UpdatetPush(tPush instance);
  partial void DeletetPush(tPush instance);
  partial void InserttServicesClass(tServicesClass instance);
  partial void UpdatetServicesClass(tServicesClass instance);
  partial void DeletetServicesClass(tServicesClass instance);
  partial void InserttServicesPic(tServicesPic instance);
  partial void UpdatetServicesPic(tServicesPic instance);
  partial void DeletetServicesPic(tServicesPic instance);
  partial void InserttServicesSubClass(tServicesSubClass instance);
  partial void UpdatetServicesSubClass(tServicesSubClass instance);
  partial void DeletetServicesSubClass(tServicesSubClass instance);
  partial void InserttLIkeServices1(tLIkeServices1 instance);
  partial void UpdatetLIkeServices1(tLIkeServices1 instance);
  partial void DeletetLIkeServices1(tLIkeServices1 instance);
  partial void InserttLIkeServices(tLIkeServices instance);
  partial void UpdatetLIkeServices(tLIkeServices instance);
  partial void DeletetLIkeServices(tLIkeServices instance);
  partial void InserttCollection(tCollection instance);
  partial void UpdatetCollection(tCollection instance);
  partial void DeletetCollection(tCollection instance);
  partial void InserttCalendar(tCalendar instance);
  partial void UpdatetCalendar(tCalendar instance);
  partial void DeletetCalendar(tCalendar instance);
  partial void InserttGallery(tGallery instance);
  partial void UpdatetGallery(tGallery instance);
  partial void DeletetGallery(tGallery instance);
  partial void InserttServices(tServices instance);
  partial void UpdatetServices(tServices instance);
  partial void DeletetServices(tServices instance);
  #endregion
	
	public FactoryDBDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["myWeddingConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public FactoryDBDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FactoryDBDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FactoryDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FactoryDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<tAnswerPrice> tAnswerPrice
	{
		get
		{
			return this.GetTable<tAnswerPrice>();
		}
	}
	
	public System.Data.Linq.Table<tStores> tStores
	{
		get
		{
			return this.GetTable<tStores>();
		}
	}
	
	public System.Data.Linq.Table<tAskPrice> tAskPrice
	{
		get
		{
			return this.GetTable<tAskPrice>();
		}
	}
	
	public System.Data.Linq.Table<tAvailableTime> tAvailableTime
	{
		get
		{
			return this.GetTable<tAvailableTime>();
		}
	}
	
	public System.Data.Linq.Table<tChat> tChat
	{
		get
		{
			return this.GetTable<tChat>();
		}
	}
	
	public System.Data.Linq.Table<tChatReply> tChatReply
	{
		get
		{
			return this.GetTable<tChatReply>();
		}
	}
	
	public System.Data.Linq.Table<tCity> tCity
	{
		get
		{
			return this.GetTable<tCity>();
		}
	}
	
	public System.Data.Linq.Table<tDiscussion> tDiscussion
	{
		get
		{
			return this.GetTable<tDiscussion>();
		}
	}
	
	public System.Data.Linq.Table<tDiscussionReply> tDiscussionReply
	{
		get
		{
			return this.GetTable<tDiscussionReply>();
		}
	}
	
	public System.Data.Linq.Table<tEvaluation> tEvaluation
	{
		get
		{
			return this.GetTable<tEvaluation>();
		}
	}
	
	public System.Data.Linq.Table<tFate> tFate
	{
		get
		{
			return this.GetTable<tFate>();
		}
	}
	
	public System.Data.Linq.Table<tGalleryPhoto> tGalleryPhoto
	{
		get
		{
			return this.GetTable<tGalleryPhoto>();
		}
	}
	
	public System.Data.Linq.Table<tLetter> tLetter
	{
		get
		{
			return this.GetTable<tLetter>();
		}
	}
	
	public System.Data.Linq.Table<tManual> tManual
	{
		get
		{
			return this.GetTable<tManual>();
		}
	}
	
	public System.Data.Linq.Table<tMember> tMember
	{
		get
		{
			return this.GetTable<tMember>();
		}
	}
	
	public System.Data.Linq.Table<tPush> tPush
	{
		get
		{
			return this.GetTable<tPush>();
		}
	}
	
	public System.Data.Linq.Table<tServicesClass> tServicesClass
	{
		get
		{
			return this.GetTable<tServicesClass>();
		}
	}
	
	public System.Data.Linq.Table<tServicesPic> tServicesPic
	{
		get
		{
			return this.GetTable<tServicesPic>();
		}
	}
	
	public System.Data.Linq.Table<tServicesSubClass> tServicesSubClass
	{
		get
		{
			return this.GetTable<tServicesSubClass>();
		}
	}
	
	public System.Data.Linq.Table<tLIkeServices1> tLIkeServices1
	{
		get
		{
			return this.GetTable<tLIkeServices1>();
		}
	}
	
	public System.Data.Linq.Table<tLIkeServices> tLIkeServices
	{
		get
		{
			return this.GetTable<tLIkeServices>();
		}
	}
	
	public System.Data.Linq.Table<tCollection> tCollection
	{
		get
		{
			return this.GetTable<tCollection>();
		}
	}
	
	public System.Data.Linq.Table<tCalendar> tCalendar
	{
		get
		{
			return this.GetTable<tCalendar>();
		}
	}
	
	public System.Data.Linq.Table<tGallery> tGallery
	{
		get
		{
			return this.GetTable<tGallery>();
		}
	}
	
	public System.Data.Linq.Table<tServices> tServices
	{
		get
		{
			return this.GetTable<tServices>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tAnswerPrice")]
public partial class tAnswerPrice : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdAnswerPrice;
	
	private int _fIdTitle;
	
	private int _fIdStore;
	
	private string _fContent;
	
	private System.DateTime _fSendTime;
	
	private int _fIdServices;
	
	private EntityRef<tAskPrice> _tAskPrice;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdAnswerPriceChanging(int value);
    partial void OnfIdAnswerPriceChanged();
    partial void OnfIdTitleChanging(int value);
    partial void OnfIdTitleChanged();
    partial void OnfIdStoreChanging(int value);
    partial void OnfIdStoreChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    partial void OnfSendTimeChanging(System.DateTime value);
    partial void OnfSendTimeChanged();
    partial void OnfIdServicesChanging(int value);
    partial void OnfIdServicesChanged();
    #endregion
	
	public tAnswerPrice()
	{
		this._tAskPrice = default(EntityRef<tAskPrice>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdAnswerPrice", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdAnswerPrice
	{
		get
		{
			return this._fIdAnswerPrice;
		}
		set
		{
			if ((this._fIdAnswerPrice != value))
			{
				this.OnfIdAnswerPriceChanging(value);
				this.SendPropertyChanging();
				this._fIdAnswerPrice = value;
				this.SendPropertyChanged("fIdAnswerPrice");
				this.OnfIdAnswerPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdTitle", DbType="Int NOT NULL")]
	public int fIdTitle
	{
		get
		{
			return this._fIdTitle;
		}
		set
		{
			if ((this._fIdTitle != value))
			{
				if (this._tAskPrice.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdTitleChanging(value);
				this.SendPropertyChanging();
				this._fIdTitle = value;
				this.SendPropertyChanged("fIdTitle");
				this.OnfIdTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdStore", DbType="Int NOT NULL")]
	public int fIdStore
	{
		get
		{
			return this._fIdStore;
		}
		set
		{
			if ((this._fIdStore != value))
			{
				this.OnfIdStoreChanging(value);
				this.SendPropertyChanging();
				this._fIdStore = value;
				this.SendPropertyChanged("fIdStore");
				this.OnfIdStoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSendTime", DbType="DateTime NOT NULL")]
	public System.DateTime fSendTime
	{
		get
		{
			return this._fSendTime;
		}
		set
		{
			if ((this._fSendTime != value))
			{
				this.OnfSendTimeChanging(value);
				this.SendPropertyChanging();
				this._fSendTime = value;
				this.SendPropertyChanged("fSendTime");
				this.OnfSendTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdServices", DbType="Int NOT NULL")]
	public int fIdServices
	{
		get
		{
			return this._fIdServices;
		}
		set
		{
			if ((this._fIdServices != value))
			{
				this.OnfIdServicesChanging(value);
				this.SendPropertyChanging();
				this._fIdServices = value;
				this.SendPropertyChanged("fIdServices");
				this.OnfIdServicesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tAskPrice_tAnswerPrice", Storage="_tAskPrice", ThisKey="fIdTitle", OtherKey="fIdTitle", IsForeignKey=true)]
	public tAskPrice tAskPrice
	{
		get
		{
			return this._tAskPrice.Entity;
		}
		set
		{
			tAskPrice previousValue = this._tAskPrice.Entity;
			if (((previousValue != value) 
						|| (this._tAskPrice.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tAskPrice.Entity = null;
					previousValue.tAnswerPrice.Remove(this);
				}
				this._tAskPrice.Entity = value;
				if ((value != null))
				{
					value.tAnswerPrice.Add(this);
					this._fIdTitle = value.fIdTitle;
				}
				else
				{
					this._fIdTitle = default(int);
				}
				this.SendPropertyChanged("tAskPrice");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tStores")]
public partial class tStores : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdStores;
	
	private string _fWebInfo;
	
	private string _fMobilePhone;
	
	private string _fLineId;
	
	private string _fHoliday;
	
	private string _fOpeningTime;
	
	private System.Nullable<int> _fPopularity;
	
	private string _fDescription;
	
	private System.Nullable<int> _fIdCity;
	
	private EntitySet<tAvailableTime> _tAvailableTime;
	
	private EntitySet<tChat> _tChat;
	
	private EntitySet<tPush> _tPush;
	
	private EntitySet<tCollection> _tCollection;
	
	private EntitySet<tCalendar> _tCalendar;
	
	private EntitySet<tServices> _tServices;
	
	private EntityRef<tCity> _tCity;
	
	private EntityRef<tMember> _tMember;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdStoresChanging(int value);
    partial void OnfIdStoresChanged();
    partial void OnfWebInfoChanging(string value);
    partial void OnfWebInfoChanged();
    partial void OnfMobilePhoneChanging(string value);
    partial void OnfMobilePhoneChanged();
    partial void OnfLineIdChanging(string value);
    partial void OnfLineIdChanged();
    partial void OnfHolidayChanging(string value);
    partial void OnfHolidayChanged();
    partial void OnfOpeningTimeChanging(string value);
    partial void OnfOpeningTimeChanged();
    partial void OnfPopularityChanging(System.Nullable<int> value);
    partial void OnfPopularityChanged();
    partial void OnfDescriptionChanging(string value);
    partial void OnfDescriptionChanged();
    partial void OnfIdCityChanging(System.Nullable<int> value);
    partial void OnfIdCityChanged();
    #endregion
	
	public tStores()
	{
		this._tAvailableTime = new EntitySet<tAvailableTime>(new Action<tAvailableTime>(this.attach_tAvailableTime), new Action<tAvailableTime>(this.detach_tAvailableTime));
		this._tChat = new EntitySet<tChat>(new Action<tChat>(this.attach_tChat), new Action<tChat>(this.detach_tChat));
		this._tPush = new EntitySet<tPush>(new Action<tPush>(this.attach_tPush), new Action<tPush>(this.detach_tPush));
		this._tCollection = new EntitySet<tCollection>(new Action<tCollection>(this.attach_tCollection), new Action<tCollection>(this.detach_tCollection));
		this._tCalendar = new EntitySet<tCalendar>(new Action<tCalendar>(this.attach_tCalendar), new Action<tCalendar>(this.detach_tCalendar));
		this._tServices = new EntitySet<tServices>(new Action<tServices>(this.attach_tServices), new Action<tServices>(this.detach_tServices));
		this._tCity = default(EntityRef<tCity>);
		this._tMember = default(EntityRef<tMember>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdStores", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int fIdStores
	{
		get
		{
			return this._fIdStores;
		}
		set
		{
			if ((this._fIdStores != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdStoresChanging(value);
				this.SendPropertyChanging();
				this._fIdStores = value;
				this.SendPropertyChanged("fIdStores");
				this.OnfIdStoresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fWebInfo", DbType="NVarChar(50)")]
	public string fWebInfo
	{
		get
		{
			return this._fWebInfo;
		}
		set
		{
			if ((this._fWebInfo != value))
			{
				this.OnfWebInfoChanging(value);
				this.SendPropertyChanging();
				this._fWebInfo = value;
				this.SendPropertyChanged("fWebInfo");
				this.OnfWebInfoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fMobilePhone", DbType="NVarChar(50)")]
	public string fMobilePhone
	{
		get
		{
			return this._fMobilePhone;
		}
		set
		{
			if ((this._fMobilePhone != value))
			{
				this.OnfMobilePhoneChanging(value);
				this.SendPropertyChanging();
				this._fMobilePhone = value;
				this.SendPropertyChanged("fMobilePhone");
				this.OnfMobilePhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fLineId", DbType="NVarChar(50)")]
	public string fLineId
	{
		get
		{
			return this._fLineId;
		}
		set
		{
			if ((this._fLineId != value))
			{
				this.OnfLineIdChanging(value);
				this.SendPropertyChanging();
				this._fLineId = value;
				this.SendPropertyChanged("fLineId");
				this.OnfLineIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fHoliday", DbType="NVarChar(50)")]
	public string fHoliday
	{
		get
		{
			return this._fHoliday;
		}
		set
		{
			if ((this._fHoliday != value))
			{
				this.OnfHolidayChanging(value);
				this.SendPropertyChanging();
				this._fHoliday = value;
				this.SendPropertyChanged("fHoliday");
				this.OnfHolidayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fOpeningTime", DbType="NVarChar(50)")]
	public string fOpeningTime
	{
		get
		{
			return this._fOpeningTime;
		}
		set
		{
			if ((this._fOpeningTime != value))
			{
				this.OnfOpeningTimeChanging(value);
				this.SendPropertyChanging();
				this._fOpeningTime = value;
				this.SendPropertyChanged("fOpeningTime");
				this.OnfOpeningTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fPopularity", DbType="Int")]
	public System.Nullable<int> fPopularity
	{
		get
		{
			return this._fPopularity;
		}
		set
		{
			if ((this._fPopularity != value))
			{
				this.OnfPopularityChanging(value);
				this.SendPropertyChanging();
				this._fPopularity = value;
				this.SendPropertyChanged("fPopularity");
				this.OnfPopularityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fDescription", DbType="NVarChar(2000)")]
	public string fDescription
	{
		get
		{
			return this._fDescription;
		}
		set
		{
			if ((this._fDescription != value))
			{
				this.OnfDescriptionChanging(value);
				this.SendPropertyChanging();
				this._fDescription = value;
				this.SendPropertyChanged("fDescription");
				this.OnfDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdCity", DbType="Int")]
	public System.Nullable<int> fIdCity
	{
		get
		{
			return this._fIdCity;
		}
		set
		{
			if ((this._fIdCity != value))
			{
				if (this._tCity.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdCityChanging(value);
				this.SendPropertyChanging();
				this._fIdCity = value;
				this.SendPropertyChanged("fIdCity");
				this.OnfIdCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tAvailableTime", Storage="_tAvailableTime", ThisKey="fIdStores", OtherKey="fIdStores")]
	public EntitySet<tAvailableTime> tAvailableTime
	{
		get
		{
			return this._tAvailableTime;
		}
		set
		{
			this._tAvailableTime.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tChat", Storage="_tChat", ThisKey="fIdStores", OtherKey="fIdStores")]
	public EntitySet<tChat> tChat
	{
		get
		{
			return this._tChat;
		}
		set
		{
			this._tChat.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tPush", Storage="_tPush", ThisKey="fIdStores", OtherKey="fIdStores")]
	public EntitySet<tPush> tPush
	{
		get
		{
			return this._tPush;
		}
		set
		{
			this._tPush.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tCollection", Storage="_tCollection", ThisKey="fIdStores", OtherKey="fIdStores")]
	public EntitySet<tCollection> tCollection
	{
		get
		{
			return this._tCollection;
		}
		set
		{
			this._tCollection.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tCalendar", Storage="_tCalendar", ThisKey="fIdStores", OtherKey="fIdStores")]
	public EntitySet<tCalendar> tCalendar
	{
		get
		{
			return this._tCalendar;
		}
		set
		{
			this._tCalendar.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tServices", Storage="_tServices", ThisKey="fIdStores", OtherKey="fIdStores")]
	public EntitySet<tServices> tServices
	{
		get
		{
			return this._tServices;
		}
		set
		{
			this._tServices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCity_tStores", Storage="_tCity", ThisKey="fIdCity", OtherKey="fIdCity", IsForeignKey=true)]
	public tCity tCity
	{
		get
		{
			return this._tCity.Entity;
		}
		set
		{
			tCity previousValue = this._tCity.Entity;
			if (((previousValue != value) 
						|| (this._tCity.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tCity.Entity = null;
					previousValue.tStores.Remove(this);
				}
				this._tCity.Entity = value;
				if ((value != null))
				{
					value.tStores.Add(this);
					this._fIdCity = value.fIdCity;
				}
				else
				{
					this._fIdCity = default(Nullable<int>);
				}
				this.SendPropertyChanged("tCity");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tStores", Storage="_tMember", ThisKey="fIdStores", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tStores = null;
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tStores = this;
					this._fIdStores = value.fIdMember;
				}
				else
				{
					this._fIdStores = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tAvailableTime(tAvailableTime entity)
	{
		this.SendPropertyChanging();
		entity.tStores = this;
	}
	
	private void detach_tAvailableTime(tAvailableTime entity)
	{
		this.SendPropertyChanging();
		entity.tStores = null;
	}
	
	private void attach_tChat(tChat entity)
	{
		this.SendPropertyChanging();
		entity.tStores = this;
	}
	
	private void detach_tChat(tChat entity)
	{
		this.SendPropertyChanging();
		entity.tStores = null;
	}
	
	private void attach_tPush(tPush entity)
	{
		this.SendPropertyChanging();
		entity.tStores = this;
	}
	
	private void detach_tPush(tPush entity)
	{
		this.SendPropertyChanging();
		entity.tStores = null;
	}
	
	private void attach_tCollection(tCollection entity)
	{
		this.SendPropertyChanging();
		entity.tStores = this;
	}
	
	private void detach_tCollection(tCollection entity)
	{
		this.SendPropertyChanging();
		entity.tStores = null;
	}
	
	private void attach_tCalendar(tCalendar entity)
	{
		this.SendPropertyChanging();
		entity.tStores = this;
	}
	
	private void detach_tCalendar(tCalendar entity)
	{
		this.SendPropertyChanging();
		entity.tStores = null;
	}
	
	private void attach_tServices(tServices entity)
	{
		this.SendPropertyChanging();
		entity.tStores = this;
	}
	
	private void detach_tServices(tServices entity)
	{
		this.SendPropertyChanging();
		entity.tStores = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tAskPrice")]
public partial class tAskPrice : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdTitle;
	
	private int _fIdMember;
	
	private string _fContent;
	
	private string _fTitle;
	
	private System.DateTime _fSendTime;
	
	private System.DateTime _fWantDay;
	
	private EntitySet<tAnswerPrice> _tAnswerPrice;
	
	private EntityRef<tMember> _tMember;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdTitleChanging(int value);
    partial void OnfIdTitleChanged();
    partial void OnfIdMemberChanging(int value);
    partial void OnfIdMemberChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    partial void OnfTitleChanging(string value);
    partial void OnfTitleChanged();
    partial void OnfSendTimeChanging(System.DateTime value);
    partial void OnfSendTimeChanged();
    partial void OnfWantDayChanging(System.DateTime value);
    partial void OnfWantDayChanged();
    #endregion
	
	public tAskPrice()
	{
		this._tAnswerPrice = new EntitySet<tAnswerPrice>(new Action<tAnswerPrice>(this.attach_tAnswerPrice), new Action<tAnswerPrice>(this.detach_tAnswerPrice));
		this._tMember = default(EntityRef<tMember>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdTitle", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdTitle
	{
		get
		{
			return this._fIdTitle;
		}
		set
		{
			if ((this._fIdTitle != value))
			{
				this.OnfIdTitleChanging(value);
				this.SendPropertyChanging();
				this._fIdTitle = value;
				this.SendPropertyChanged("fIdTitle");
				this.OnfIdTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdMember", DbType="Int NOT NULL")]
	public int fIdMember
	{
		get
		{
			return this._fIdMember;
		}
		set
		{
			if ((this._fIdMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdMemberChanging(value);
				this.SendPropertyChanging();
				this._fIdMember = value;
				this.SendPropertyChanged("fIdMember");
				this.OnfIdMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string fTitle
	{
		get
		{
			return this._fTitle;
		}
		set
		{
			if ((this._fTitle != value))
			{
				this.OnfTitleChanging(value);
				this.SendPropertyChanging();
				this._fTitle = value;
				this.SendPropertyChanged("fTitle");
				this.OnfTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSendTime", DbType="DateTime NOT NULL")]
	public System.DateTime fSendTime
	{
		get
		{
			return this._fSendTime;
		}
		set
		{
			if ((this._fSendTime != value))
			{
				this.OnfSendTimeChanging(value);
				this.SendPropertyChanging();
				this._fSendTime = value;
				this.SendPropertyChanged("fSendTime");
				this.OnfSendTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fWantDay", DbType="Date NOT NULL")]
	public System.DateTime fWantDay
	{
		get
		{
			return this._fWantDay;
		}
		set
		{
			if ((this._fWantDay != value))
			{
				this.OnfWantDayChanging(value);
				this.SendPropertyChanging();
				this._fWantDay = value;
				this.SendPropertyChanged("fWantDay");
				this.OnfWantDayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tAskPrice_tAnswerPrice", Storage="_tAnswerPrice", ThisKey="fIdTitle", OtherKey="fIdTitle")]
	public EntitySet<tAnswerPrice> tAnswerPrice
	{
		get
		{
			return this._tAnswerPrice;
		}
		set
		{
			this._tAnswerPrice.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tAskPrice", Storage="_tMember", ThisKey="fIdMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tAskPrice.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tAskPrice.Add(this);
					this._fIdMember = value.fIdMember;
				}
				else
				{
					this._fIdMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tAnswerPrice(tAnswerPrice entity)
	{
		this.SendPropertyChanging();
		entity.tAskPrice = this;
	}
	
	private void detach_tAnswerPrice(tAnswerPrice entity)
	{
		this.SendPropertyChanging();
		entity.tAskPrice = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tAvailableTime")]
public partial class tAvailableTime : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdAvailableTime;
	
	private int _fIdStores;
	
	private System.Nullable<System.DateTime> _fAvailableTime;
	
	private EntityRef<tStores> _tStores;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdAvailableTimeChanging(int value);
    partial void OnfIdAvailableTimeChanged();
    partial void OnfIdStoresChanging(int value);
    partial void OnfIdStoresChanged();
    partial void OnfAvailableTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnfAvailableTimeChanged();
    #endregion
	
	public tAvailableTime()
	{
		this._tStores = default(EntityRef<tStores>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdAvailableTime", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdAvailableTime
	{
		get
		{
			return this._fIdAvailableTime;
		}
		set
		{
			if ((this._fIdAvailableTime != value))
			{
				this.OnfIdAvailableTimeChanging(value);
				this.SendPropertyChanging();
				this._fIdAvailableTime = value;
				this.SendPropertyChanged("fIdAvailableTime");
				this.OnfIdAvailableTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdStores", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int fIdStores
	{
		get
		{
			return this._fIdStores;
		}
		set
		{
			if ((this._fIdStores != value))
			{
				if (this._tStores.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdStoresChanging(value);
				this.SendPropertyChanging();
				this._fIdStores = value;
				this.SendPropertyChanged("fIdStores");
				this.OnfIdStoresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fAvailableTime", DbType="Date")]
	public System.Nullable<System.DateTime> fAvailableTime
	{
		get
		{
			return this._fAvailableTime;
		}
		set
		{
			if ((this._fAvailableTime != value))
			{
				this.OnfAvailableTimeChanging(value);
				this.SendPropertyChanging();
				this._fAvailableTime = value;
				this.SendPropertyChanged("fAvailableTime");
				this.OnfAvailableTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tAvailableTime", Storage="_tStores", ThisKey="fIdStores", OtherKey="fIdStores", IsForeignKey=true)]
	public tStores tStores
	{
		get
		{
			return this._tStores.Entity;
		}
		set
		{
			tStores previousValue = this._tStores.Entity;
			if (((previousValue != value) 
						|| (this._tStores.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tStores.Entity = null;
					previousValue.tAvailableTime.Remove(this);
				}
				this._tStores.Entity = value;
				if ((value != null))
				{
					value.tAvailableTime.Add(this);
					this._fIdStores = value.fIdStores;
				}
				else
				{
					this._fIdStores = default(int);
				}
				this.SendPropertyChanged("tStores");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tChat")]
public partial class tChat : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdChat;
	
	private int _fIdMember;
	
	private int _fIdStores;
	
	private System.Nullable<System.DateTime> _fSendTime;
	
	private string _fMsg;
	
	private EntitySet<tChatReply> _tChatReply;
	
	private EntityRef<tStores> _tStores;
	
	private EntityRef<tMember> _tMember;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdChatChanging(int value);
    partial void OnfIdChatChanged();
    partial void OnfIdMemberChanging(int value);
    partial void OnfIdMemberChanged();
    partial void OnfIdStoresChanging(int value);
    partial void OnfIdStoresChanged();
    partial void OnfSendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnfSendTimeChanged();
    partial void OnfMsgChanging(string value);
    partial void OnfMsgChanged();
    #endregion
	
	public tChat()
	{
		this._tChatReply = new EntitySet<tChatReply>(new Action<tChatReply>(this.attach_tChatReply), new Action<tChatReply>(this.detach_tChatReply));
		this._tStores = default(EntityRef<tStores>);
		this._tMember = default(EntityRef<tMember>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdChat", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdChat
	{
		get
		{
			return this._fIdChat;
		}
		set
		{
			if ((this._fIdChat != value))
			{
				this.OnfIdChatChanging(value);
				this.SendPropertyChanging();
				this._fIdChat = value;
				this.SendPropertyChanged("fIdChat");
				this.OnfIdChatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdMember", DbType="Int NOT NULL")]
	public int fIdMember
	{
		get
		{
			return this._fIdMember;
		}
		set
		{
			if ((this._fIdMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdMemberChanging(value);
				this.SendPropertyChanging();
				this._fIdMember = value;
				this.SendPropertyChanged("fIdMember");
				this.OnfIdMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdStores", DbType="Int NOT NULL")]
	public int fIdStores
	{
		get
		{
			return this._fIdStores;
		}
		set
		{
			if ((this._fIdStores != value))
			{
				if (this._tStores.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdStoresChanging(value);
				this.SendPropertyChanging();
				this._fIdStores = value;
				this.SendPropertyChanged("fIdStores");
				this.OnfIdStoresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSendTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> fSendTime
	{
		get
		{
			return this._fSendTime;
		}
		set
		{
			if ((this._fSendTime != value))
			{
				this.OnfSendTimeChanging(value);
				this.SendPropertyChanging();
				this._fSendTime = value;
				this.SendPropertyChanged("fSendTime");
				this.OnfSendTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fMsg", DbType="NVarChar(2000)")]
	public string fMsg
	{
		get
		{
			return this._fMsg;
		}
		set
		{
			if ((this._fMsg != value))
			{
				this.OnfMsgChanging(value);
				this.SendPropertyChanging();
				this._fMsg = value;
				this.SendPropertyChanged("fMsg");
				this.OnfMsgChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tChat_tChatReply", Storage="_tChatReply", ThisKey="fIdChat", OtherKey="fIdChat")]
	public EntitySet<tChatReply> tChatReply
	{
		get
		{
			return this._tChatReply;
		}
		set
		{
			this._tChatReply.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tChat", Storage="_tStores", ThisKey="fIdStores", OtherKey="fIdStores", IsForeignKey=true)]
	public tStores tStores
	{
		get
		{
			return this._tStores.Entity;
		}
		set
		{
			tStores previousValue = this._tStores.Entity;
			if (((previousValue != value) 
						|| (this._tStores.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tStores.Entity = null;
					previousValue.tChat.Remove(this);
				}
				this._tStores.Entity = value;
				if ((value != null))
				{
					value.tChat.Add(this);
					this._fIdStores = value.fIdStores;
				}
				else
				{
					this._fIdStores = default(int);
				}
				this.SendPropertyChanged("tStores");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tChat", Storage="_tMember", ThisKey="fIdMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tChat.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tChat.Add(this);
					this._fIdMember = value.fIdMember;
				}
				else
				{
					this._fIdMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tChatReply(tChatReply entity)
	{
		this.SendPropertyChanging();
		entity.tChat = this;
	}
	
	private void detach_tChatReply(tChatReply entity)
	{
		this.SendPropertyChanging();
		entity.tChat = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tChatReply")]
public partial class tChatReply : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdChatReply;
	
	private int _fIdChat;
	
	private int _fIdSender;
	
	private System.DateTime _fSendTime;
	
	private string _fContent;
	
	private EntityRef<tChat> _tChat;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdChatReplyChanging(int value);
    partial void OnfIdChatReplyChanged();
    partial void OnfIdChatChanging(int value);
    partial void OnfIdChatChanged();
    partial void OnfIdSenderChanging(int value);
    partial void OnfIdSenderChanged();
    partial void OnfSendTimeChanging(System.DateTime value);
    partial void OnfSendTimeChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    #endregion
	
	public tChatReply()
	{
		this._tChat = default(EntityRef<tChat>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdChatReply", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdChatReply
	{
		get
		{
			return this._fIdChatReply;
		}
		set
		{
			if ((this._fIdChatReply != value))
			{
				this.OnfIdChatReplyChanging(value);
				this.SendPropertyChanging();
				this._fIdChatReply = value;
				this.SendPropertyChanged("fIdChatReply");
				this.OnfIdChatReplyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdChat", DbType="Int NOT NULL")]
	public int fIdChat
	{
		get
		{
			return this._fIdChat;
		}
		set
		{
			if ((this._fIdChat != value))
			{
				if (this._tChat.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdChatChanging(value);
				this.SendPropertyChanging();
				this._fIdChat = value;
				this.SendPropertyChanged("fIdChat");
				this.OnfIdChatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdSender", DbType="Int NOT NULL")]
	public int fIdSender
	{
		get
		{
			return this._fIdSender;
		}
		set
		{
			if ((this._fIdSender != value))
			{
				this.OnfIdSenderChanging(value);
				this.SendPropertyChanging();
				this._fIdSender = value;
				this.SendPropertyChanged("fIdSender");
				this.OnfIdSenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSendTime", DbType="DateTime NOT NULL")]
	public System.DateTime fSendTime
	{
		get
		{
			return this._fSendTime;
		}
		set
		{
			if ((this._fSendTime != value))
			{
				this.OnfSendTimeChanging(value);
				this.SendPropertyChanging();
				this._fSendTime = value;
				this.SendPropertyChanged("fSendTime");
				this.OnfSendTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(2000)")]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tChat_tChatReply", Storage="_tChat", ThisKey="fIdChat", OtherKey="fIdChat", IsForeignKey=true)]
	public tChat tChat
	{
		get
		{
			return this._tChat.Entity;
		}
		set
		{
			tChat previousValue = this._tChat.Entity;
			if (((previousValue != value) 
						|| (this._tChat.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tChat.Entity = null;
					previousValue.tChatReply.Remove(this);
				}
				this._tChat.Entity = value;
				if ((value != null))
				{
					value.tChatReply.Add(this);
					this._fIdChat = value.fIdChat;
				}
				else
				{
					this._fIdChat = default(int);
				}
				this.SendPropertyChanged("tChat");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tCity")]
public partial class tCity : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdCity;
	
	private string _fCity;
	
	private EntitySet<tStores> _tStores;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdCityChanging(int value);
    partial void OnfIdCityChanged();
    partial void OnfCityChanging(string value);
    partial void OnfCityChanged();
    #endregion
	
	public tCity()
	{
		this._tStores = new EntitySet<tStores>(new Action<tStores>(this.attach_tStores), new Action<tStores>(this.detach_tStores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdCity", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdCity
	{
		get
		{
			return this._fIdCity;
		}
		set
		{
			if ((this._fIdCity != value))
			{
				this.OnfIdCityChanging(value);
				this.SendPropertyChanging();
				this._fIdCity = value;
				this.SendPropertyChanged("fIdCity");
				this.OnfIdCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fCity", DbType="NVarChar(50)")]
	public string fCity
	{
		get
		{
			return this._fCity;
		}
		set
		{
			if ((this._fCity != value))
			{
				this.OnfCityChanging(value);
				this.SendPropertyChanging();
				this._fCity = value;
				this.SendPropertyChanged("fCity");
				this.OnfCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCity_tStores", Storage="_tStores", ThisKey="fIdCity", OtherKey="fIdCity")]
	public EntitySet<tStores> tStores
	{
		get
		{
			return this._tStores;
		}
		set
		{
			this._tStores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tStores(tStores entity)
	{
		this.SendPropertyChanging();
		entity.tCity = this;
	}
	
	private void detach_tStores(tStores entity)
	{
		this.SendPropertyChanging();
		entity.tCity = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tDiscussion")]
public partial class tDiscussion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdTitle;
	
	private string _fTitle;
	
	private string _fContent;
	
	private System.Nullable<System.DateTime> _fSendTime;
	
	private int _fIdMember;
	
	private EntitySet<tDiscussionReply> _tDiscussionReply;
	
	private EntityRef<tMember> _tMember;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdTitleChanging(int value);
    partial void OnfIdTitleChanged();
    partial void OnfTitleChanging(string value);
    partial void OnfTitleChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    partial void OnfSendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnfSendTimeChanged();
    partial void OnfIdMemberChanging(int value);
    partial void OnfIdMemberChanged();
    #endregion
	
	public tDiscussion()
	{
		this._tDiscussionReply = new EntitySet<tDiscussionReply>(new Action<tDiscussionReply>(this.attach_tDiscussionReply), new Action<tDiscussionReply>(this.detach_tDiscussionReply));
		this._tMember = default(EntityRef<tMember>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdTitle", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdTitle
	{
		get
		{
			return this._fIdTitle;
		}
		set
		{
			if ((this._fIdTitle != value))
			{
				this.OnfIdTitleChanging(value);
				this.SendPropertyChanging();
				this._fIdTitle = value;
				this.SendPropertyChanged("fIdTitle");
				this.OnfIdTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string fTitle
	{
		get
		{
			return this._fTitle;
		}
		set
		{
			if ((this._fTitle != value))
			{
				this.OnfTitleChanging(value);
				this.SendPropertyChanging();
				this._fTitle = value;
				this.SendPropertyChanged("fTitle");
				this.OnfTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(2000)")]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSendTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> fSendTime
	{
		get
		{
			return this._fSendTime;
		}
		set
		{
			if ((this._fSendTime != value))
			{
				this.OnfSendTimeChanging(value);
				this.SendPropertyChanging();
				this._fSendTime = value;
				this.SendPropertyChanged("fSendTime");
				this.OnfSendTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdMember", DbType="Int NOT NULL")]
	public int fIdMember
	{
		get
		{
			return this._fIdMember;
		}
		set
		{
			if ((this._fIdMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdMemberChanging(value);
				this.SendPropertyChanging();
				this._fIdMember = value;
				this.SendPropertyChanged("fIdMember");
				this.OnfIdMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tDiscussion_tDiscussionReply", Storage="_tDiscussionReply", ThisKey="fIdTitle", OtherKey="fIdTitle")]
	public EntitySet<tDiscussionReply> tDiscussionReply
	{
		get
		{
			return this._tDiscussionReply;
		}
		set
		{
			this._tDiscussionReply.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tDiscussion", Storage="_tMember", ThisKey="fIdMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tDiscussion.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tDiscussion.Add(this);
					this._fIdMember = value.fIdMember;
				}
				else
				{
					this._fIdMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tDiscussionReply(tDiscussionReply entity)
	{
		this.SendPropertyChanging();
		entity.tDiscussion = this;
	}
	
	private void detach_tDiscussionReply(tDiscussionReply entity)
	{
		this.SendPropertyChanging();
		entity.tDiscussion = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tDiscussionReply")]
public partial class tDiscussionReply : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdDiscussionReply;
	
	private int _fIdTitle;
	
	private int _fIdMember;
	
	private System.Nullable<System.DateTime> _fSendTime;
	
	private string _fContent;
	
	private EntityRef<tDiscussion> _tDiscussion;
	
	private EntityRef<tMember> _tMember;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdDiscussionReplyChanging(int value);
    partial void OnfIdDiscussionReplyChanged();
    partial void OnfIdTitleChanging(int value);
    partial void OnfIdTitleChanged();
    partial void OnfIdMemberChanging(int value);
    partial void OnfIdMemberChanged();
    partial void OnfSendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnfSendTimeChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    #endregion
	
	public tDiscussionReply()
	{
		this._tDiscussion = default(EntityRef<tDiscussion>);
		this._tMember = default(EntityRef<tMember>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdDiscussionReply", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdDiscussionReply
	{
		get
		{
			return this._fIdDiscussionReply;
		}
		set
		{
			if ((this._fIdDiscussionReply != value))
			{
				this.OnfIdDiscussionReplyChanging(value);
				this.SendPropertyChanging();
				this._fIdDiscussionReply = value;
				this.SendPropertyChanged("fIdDiscussionReply");
				this.OnfIdDiscussionReplyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdTitle", DbType="Int NOT NULL")]
	public int fIdTitle
	{
		get
		{
			return this._fIdTitle;
		}
		set
		{
			if ((this._fIdTitle != value))
			{
				if (this._tDiscussion.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdTitleChanging(value);
				this.SendPropertyChanging();
				this._fIdTitle = value;
				this.SendPropertyChanged("fIdTitle");
				this.OnfIdTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdMember", DbType="Int NOT NULL")]
	public int fIdMember
	{
		get
		{
			return this._fIdMember;
		}
		set
		{
			if ((this._fIdMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdMemberChanging(value);
				this.SendPropertyChanging();
				this._fIdMember = value;
				this.SendPropertyChanged("fIdMember");
				this.OnfIdMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSendTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> fSendTime
	{
		get
		{
			return this._fSendTime;
		}
		set
		{
			if ((this._fSendTime != value))
			{
				this.OnfSendTimeChanging(value);
				this.SendPropertyChanging();
				this._fSendTime = value;
				this.SendPropertyChanged("fSendTime");
				this.OnfSendTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(2000)")]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tDiscussion_tDiscussionReply", Storage="_tDiscussion", ThisKey="fIdTitle", OtherKey="fIdTitle", IsForeignKey=true)]
	public tDiscussion tDiscussion
	{
		get
		{
			return this._tDiscussion.Entity;
		}
		set
		{
			tDiscussion previousValue = this._tDiscussion.Entity;
			if (((previousValue != value) 
						|| (this._tDiscussion.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tDiscussion.Entity = null;
					previousValue.tDiscussionReply.Remove(this);
				}
				this._tDiscussion.Entity = value;
				if ((value != null))
				{
					value.tDiscussionReply.Add(this);
					this._fIdTitle = value.fIdTitle;
				}
				else
				{
					this._fIdTitle = default(int);
				}
				this.SendPropertyChanged("tDiscussion");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tDiscussionReply", Storage="_tMember", ThisKey="fIdMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tDiscussionReply.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tDiscussionReply.Add(this);
					this._fIdMember = value.fIdMember;
				}
				else
				{
					this._fIdMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tEvaluation")]
public partial class tEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fidEvaluation;
	
	private int _fidMember;
	
	private System.Nullable<int> _fStar;
	
	private System.Nullable<int> _fidServices;
	
	private string _fContent;
	
	private EntityRef<tMember> _tMember;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfidEvaluationChanging(int value);
    partial void OnfidEvaluationChanged();
    partial void OnfidMemberChanging(int value);
    partial void OnfidMemberChanged();
    partial void OnfStarChanging(System.Nullable<int> value);
    partial void OnfStarChanged();
    partial void OnfidServicesChanging(System.Nullable<int> value);
    partial void OnfidServicesChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    #endregion
	
	public tEvaluation()
	{
		this._tMember = default(EntityRef<tMember>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidEvaluation", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fidEvaluation
	{
		get
		{
			return this._fidEvaluation;
		}
		set
		{
			if ((this._fidEvaluation != value))
			{
				this.OnfidEvaluationChanging(value);
				this.SendPropertyChanging();
				this._fidEvaluation = value;
				this.SendPropertyChanged("fidEvaluation");
				this.OnfidEvaluationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidMember", DbType="Int NOT NULL")]
	public int fidMember
	{
		get
		{
			return this._fidMember;
		}
		set
		{
			if ((this._fidMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfidMemberChanging(value);
				this.SendPropertyChanging();
				this._fidMember = value;
				this.SendPropertyChanged("fidMember");
				this.OnfidMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fStar", DbType="Int")]
	public System.Nullable<int> fStar
	{
		get
		{
			return this._fStar;
		}
		set
		{
			if ((this._fStar != value))
			{
				this.OnfStarChanging(value);
				this.SendPropertyChanging();
				this._fStar = value;
				this.SendPropertyChanged("fStar");
				this.OnfStarChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidServices", DbType="Int")]
	public System.Nullable<int> fidServices
	{
		get
		{
			return this._fidServices;
		}
		set
		{
			if ((this._fidServices != value))
			{
				this.OnfidServicesChanging(value);
				this.SendPropertyChanging();
				this._fidServices = value;
				this.SendPropertyChanged("fidServices");
				this.OnfidServicesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(2000)")]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tEvaluation", Storage="_tMember", ThisKey="fidMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tEvaluation.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tEvaluation.Add(this);
					this._fidMember = value.fIdMember;
				}
				else
				{
					this._fidMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tFate")]
public partial class tFate : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdFate;
	
	private string _fYear;
	
	private string _fMonth;
	
	private string _fDate;
	
	private System.Nullable<int> _fCanMarried;
	
	private string _fContent;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdFateChanging(int value);
    partial void OnfIdFateChanged();
    partial void OnfYearChanging(string value);
    partial void OnfYearChanged();
    partial void OnfMonthChanging(string value);
    partial void OnfMonthChanged();
    partial void OnfDateChanging(string value);
    partial void OnfDateChanged();
    partial void OnfCanMarriedChanging(System.Nullable<int> value);
    partial void OnfCanMarriedChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    #endregion
	
	public tFate()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdFate", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdFate
	{
		get
		{
			return this._fIdFate;
		}
		set
		{
			if ((this._fIdFate != value))
			{
				this.OnfIdFateChanging(value);
				this.SendPropertyChanging();
				this._fIdFate = value;
				this.SendPropertyChanged("fIdFate");
				this.OnfIdFateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fYear", DbType="NVarChar(50)")]
	public string fYear
	{
		get
		{
			return this._fYear;
		}
		set
		{
			if ((this._fYear != value))
			{
				this.OnfYearChanging(value);
				this.SendPropertyChanging();
				this._fYear = value;
				this.SendPropertyChanged("fYear");
				this.OnfYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fMonth", DbType="NVarChar(50)")]
	public string fMonth
	{
		get
		{
			return this._fMonth;
		}
		set
		{
			if ((this._fMonth != value))
			{
				this.OnfMonthChanging(value);
				this.SendPropertyChanging();
				this._fMonth = value;
				this.SendPropertyChanged("fMonth");
				this.OnfMonthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fDate", DbType="NVarChar(50)")]
	public string fDate
	{
		get
		{
			return this._fDate;
		}
		set
		{
			if ((this._fDate != value))
			{
				this.OnfDateChanging(value);
				this.SendPropertyChanging();
				this._fDate = value;
				this.SendPropertyChanged("fDate");
				this.OnfDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fCanMarried", DbType="Int")]
	public System.Nullable<int> fCanMarried
	{
		get
		{
			return this._fCanMarried;
		}
		set
		{
			if ((this._fCanMarried != value))
			{
				this.OnfCanMarriedChanging(value);
				this.SendPropertyChanging();
				this._fCanMarried = value;
				this.SendPropertyChanged("fCanMarried");
				this.OnfCanMarriedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(2000)")]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tGalleryPhoto")]
public partial class tGalleryPhoto : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdPhoto;
	
	private int _fIdGallery;
	
	private string _fPhoto;
	
	private EntitySet<tServicesPic> _tServicesPic;
	
	private EntityRef<tGallery> _tGallery;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdPhotoChanging(int value);
    partial void OnfIdPhotoChanged();
    partial void OnfIdGalleryChanging(int value);
    partial void OnfIdGalleryChanged();
    partial void OnfPhotoChanging(string value);
    partial void OnfPhotoChanged();
    #endregion
	
	public tGalleryPhoto()
	{
		this._tServicesPic = new EntitySet<tServicesPic>(new Action<tServicesPic>(this.attach_tServicesPic), new Action<tServicesPic>(this.detach_tServicesPic));
		this._tGallery = default(EntityRef<tGallery>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdPhoto", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdPhoto
	{
		get
		{
			return this._fIdPhoto;
		}
		set
		{
			if ((this._fIdPhoto != value))
			{
				this.OnfIdPhotoChanging(value);
				this.SendPropertyChanging();
				this._fIdPhoto = value;
				this.SendPropertyChanged("fIdPhoto");
				this.OnfIdPhotoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdGallery", DbType="Int NOT NULL")]
	public int fIdGallery
	{
		get
		{
			return this._fIdGallery;
		}
		set
		{
			if ((this._fIdGallery != value))
			{
				if (this._tGallery.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdGalleryChanging(value);
				this.SendPropertyChanging();
				this._fIdGallery = value;
				this.SendPropertyChanged("fIdGallery");
				this.OnfIdGalleryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fPhoto", DbType="NVarChar(1000)")]
	public string fPhoto
	{
		get
		{
			return this._fPhoto;
		}
		set
		{
			if ((this._fPhoto != value))
			{
				this.OnfPhotoChanging(value);
				this.SendPropertyChanging();
				this._fPhoto = value;
				this.SendPropertyChanged("fPhoto");
				this.OnfPhotoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tGalleryPhoto_tServicesPic", Storage="_tServicesPic", ThisKey="fIdPhoto", OtherKey="fIdPhoto")]
	public EntitySet<tServicesPic> tServicesPic
	{
		get
		{
			return this._tServicesPic;
		}
		set
		{
			this._tServicesPic.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tGallery_tGalleryPhoto", Storage="_tGallery", ThisKey="fIdGallery", OtherKey="fIdGallery", IsForeignKey=true)]
	public tGallery tGallery
	{
		get
		{
			return this._tGallery.Entity;
		}
		set
		{
			tGallery previousValue = this._tGallery.Entity;
			if (((previousValue != value) 
						|| (this._tGallery.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tGallery.Entity = null;
					previousValue.tGalleryPhoto.Remove(this);
				}
				this._tGallery.Entity = value;
				if ((value != null))
				{
					value.tGalleryPhoto.Add(this);
					this._fIdGallery = value.fIdGallery;
				}
				else
				{
					this._fIdGallery = default(int);
				}
				this.SendPropertyChanged("tGallery");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tServicesPic(tServicesPic entity)
	{
		this.SendPropertyChanging();
		entity.tGalleryPhoto = this;
	}
	
	private void detach_tServicesPic(tServicesPic entity)
	{
		this.SendPropertyChanging();
		entity.tGalleryPhoto = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tLetter")]
public partial class tLetter : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdILetter;
	
	private string _fContent;
	
	private System.Nullable<System.DateTime> _fSendTime;
	
	private int _fIdSender;
	
	private int _fIdReceiver;
	
	private System.Nullable<bool> _fIsRead;
	
	private System.Nullable<int> _fLetterOrChat;
	
	private EntityRef<tMember> _tMember;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdILetterChanging(int value);
    partial void OnfIdILetterChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    partial void OnfSendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnfSendTimeChanged();
    partial void OnfIdSenderChanging(int value);
    partial void OnfIdSenderChanged();
    partial void OnfIdReceiverChanging(int value);
    partial void OnfIdReceiverChanged();
    partial void OnfIsReadChanging(System.Nullable<bool> value);
    partial void OnfIsReadChanged();
    partial void OnfLetterOrChatChanging(System.Nullable<int> value);
    partial void OnfLetterOrChatChanged();
    #endregion
	
	public tLetter()
	{
		this._tMember = default(EntityRef<tMember>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdILetter", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdILetter
	{
		get
		{
			return this._fIdILetter;
		}
		set
		{
			if ((this._fIdILetter != value))
			{
				this.OnfIdILetterChanging(value);
				this.SendPropertyChanging();
				this._fIdILetter = value;
				this.SendPropertyChanged("fIdILetter");
				this.OnfIdILetterChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(2000)")]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSendTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> fSendTime
	{
		get
		{
			return this._fSendTime;
		}
		set
		{
			if ((this._fSendTime != value))
			{
				this.OnfSendTimeChanging(value);
				this.SendPropertyChanging();
				this._fSendTime = value;
				this.SendPropertyChanged("fSendTime");
				this.OnfSendTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdSender", DbType="Int NOT NULL")]
	public int fIdSender
	{
		get
		{
			return this._fIdSender;
		}
		set
		{
			if ((this._fIdSender != value))
			{
				this.OnfIdSenderChanging(value);
				this.SendPropertyChanging();
				this._fIdSender = value;
				this.SendPropertyChanged("fIdSender");
				this.OnfIdSenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdReceiver", DbType="Int NOT NULL")]
	public int fIdReceiver
	{
		get
		{
			return this._fIdReceiver;
		}
		set
		{
			if ((this._fIdReceiver != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdReceiverChanging(value);
				this.SendPropertyChanging();
				this._fIdReceiver = value;
				this.SendPropertyChanged("fIdReceiver");
				this.OnfIdReceiverChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIsRead", DbType="Bit")]
	public System.Nullable<bool> fIsRead
	{
		get
		{
			return this._fIsRead;
		}
		set
		{
			if ((this._fIsRead != value))
			{
				this.OnfIsReadChanging(value);
				this.SendPropertyChanging();
				this._fIsRead = value;
				this.SendPropertyChanged("fIsRead");
				this.OnfIsReadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fLetterOrChat", DbType="Int")]
	public System.Nullable<int> fLetterOrChat
	{
		get
		{
			return this._fLetterOrChat;
		}
		set
		{
			if ((this._fLetterOrChat != value))
			{
				this.OnfLetterOrChatChanging(value);
				this.SendPropertyChanging();
				this._fLetterOrChat = value;
				this.SendPropertyChanged("fLetterOrChat");
				this.OnfLetterOrChatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tLetter", Storage="_tMember", ThisKey="fIdReceiver", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tLetter.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tLetter.Add(this);
					this._fIdReceiver = value.fIdMember;
				}
				else
				{
					this._fIdReceiver = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tManual")]
public partial class tManual : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fidManual;
	
	private int _fidServicesClass;
	
	private string _fTitle;
	
	private string _fContent;
	
	private EntityRef<tServicesClass> _tServicesClass;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfidManualChanging(int value);
    partial void OnfidManualChanged();
    partial void OnfidServicesClassChanging(int value);
    partial void OnfidServicesClassChanged();
    partial void OnfTitleChanging(string value);
    partial void OnfTitleChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    #endregion
	
	public tManual()
	{
		this._tServicesClass = default(EntityRef<tServicesClass>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidManual", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fidManual
	{
		get
		{
			return this._fidManual;
		}
		set
		{
			if ((this._fidManual != value))
			{
				this.OnfidManualChanging(value);
				this.SendPropertyChanging();
				this._fidManual = value;
				this.SendPropertyChanged("fidManual");
				this.OnfidManualChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidServicesClass", DbType="Int NOT NULL")]
	public int fidServicesClass
	{
		get
		{
			return this._fidServicesClass;
		}
		set
		{
			if ((this._fidServicesClass != value))
			{
				if (this._tServicesClass.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfidServicesClassChanging(value);
				this.SendPropertyChanging();
				this._fidServicesClass = value;
				this.SendPropertyChanged("fidServicesClass");
				this.OnfidServicesClassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fTitle", DbType="NVarChar(100)")]
	public string fTitle
	{
		get
		{
			return this._fTitle;
		}
		set
		{
			if ((this._fTitle != value))
			{
				this.OnfTitleChanging(value);
				this.SendPropertyChanging();
				this._fTitle = value;
				this.SendPropertyChanged("fTitle");
				this.OnfTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(2000)")]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServicesClass_tManual", Storage="_tServicesClass", ThisKey="fidServicesClass", OtherKey="fIdServicesClass", IsForeignKey=true)]
	public tServicesClass tServicesClass
	{
		get
		{
			return this._tServicesClass.Entity;
		}
		set
		{
			tServicesClass previousValue = this._tServicesClass.Entity;
			if (((previousValue != value) 
						|| (this._tServicesClass.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tServicesClass.Entity = null;
					previousValue.tManual.Remove(this);
				}
				this._tServicesClass.Entity = value;
				if ((value != null))
				{
					value.tManual.Add(this);
					this._fidServicesClass = value.fIdServicesClass;
				}
				else
				{
					this._fidServicesClass = default(int);
				}
				this.SendPropertyChanged("tServicesClass");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tMember")]
public partial class tMember : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdMember;
	
	private string _fAccount;
	
	private string _fPassword;
	
	private int _fIdentity;
	
	private string _fPhoto;
	
	private string _fAddress;
	
	private string _fEmail;
	
	private string _fPhone;
	
	private string _fName;
	
	private EntityRef<tStores> _tStores;
	
	private EntitySet<tAskPrice> _tAskPrice;
	
	private EntitySet<tChat> _tChat;
	
	private EntitySet<tDiscussion> _tDiscussion;
	
	private EntitySet<tDiscussionReply> _tDiscussionReply;
	
	private EntitySet<tEvaluation> _tEvaluation;
	
	private EntitySet<tLetter> _tLetter;
	
	private EntitySet<tPush> _tPush;
	
	private EntitySet<tLIkeServices1> _tLIkeServices1;
	
	private EntitySet<tLIkeServices> _tLIkeServices;
	
	private EntitySet<tCollection> _tCollection;
	
	private EntitySet<tCalendar> _tCalendar;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdMemberChanging(int value);
    partial void OnfIdMemberChanged();
    partial void OnfAccountChanging(string value);
    partial void OnfAccountChanged();
    partial void OnfPasswordChanging(string value);
    partial void OnfPasswordChanged();
    partial void OnfIdentityChanging(int value);
    partial void OnfIdentityChanged();
    partial void OnfPhotoChanging(string value);
    partial void OnfPhotoChanged();
    partial void OnfAddressChanging(string value);
    partial void OnfAddressChanged();
    partial void OnfEmailChanging(string value);
    partial void OnfEmailChanged();
    partial void OnfPhoneChanging(string value);
    partial void OnfPhoneChanged();
    partial void OnfNameChanging(string value);
    partial void OnfNameChanged();
    #endregion
	
	public tMember()
	{
		this._tStores = default(EntityRef<tStores>);
		this._tAskPrice = new EntitySet<tAskPrice>(new Action<tAskPrice>(this.attach_tAskPrice), new Action<tAskPrice>(this.detach_tAskPrice));
		this._tChat = new EntitySet<tChat>(new Action<tChat>(this.attach_tChat), new Action<tChat>(this.detach_tChat));
		this._tDiscussion = new EntitySet<tDiscussion>(new Action<tDiscussion>(this.attach_tDiscussion), new Action<tDiscussion>(this.detach_tDiscussion));
		this._tDiscussionReply = new EntitySet<tDiscussionReply>(new Action<tDiscussionReply>(this.attach_tDiscussionReply), new Action<tDiscussionReply>(this.detach_tDiscussionReply));
		this._tEvaluation = new EntitySet<tEvaluation>(new Action<tEvaluation>(this.attach_tEvaluation), new Action<tEvaluation>(this.detach_tEvaluation));
		this._tLetter = new EntitySet<tLetter>(new Action<tLetter>(this.attach_tLetter), new Action<tLetter>(this.detach_tLetter));
		this._tPush = new EntitySet<tPush>(new Action<tPush>(this.attach_tPush), new Action<tPush>(this.detach_tPush));
		this._tLIkeServices1 = new EntitySet<tLIkeServices1>(new Action<tLIkeServices1>(this.attach_tLIkeServices1), new Action<tLIkeServices1>(this.detach_tLIkeServices1));
		this._tLIkeServices = new EntitySet<tLIkeServices>(new Action<tLIkeServices>(this.attach_tLIkeServices), new Action<tLIkeServices>(this.detach_tLIkeServices));
		this._tCollection = new EntitySet<tCollection>(new Action<tCollection>(this.attach_tCollection), new Action<tCollection>(this.detach_tCollection));
		this._tCalendar = new EntitySet<tCalendar>(new Action<tCalendar>(this.attach_tCalendar), new Action<tCalendar>(this.detach_tCalendar));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdMember", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdMember
	{
		get
		{
			return this._fIdMember;
		}
		set
		{
			if ((this._fIdMember != value))
			{
				this.OnfIdMemberChanging(value);
				this.SendPropertyChanging();
				this._fIdMember = value;
				this.SendPropertyChanged("fIdMember");
				this.OnfIdMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fAccount", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string fAccount
	{
		get
		{
			return this._fAccount;
		}
		set
		{
			if ((this._fAccount != value))
			{
				this.OnfAccountChanging(value);
				this.SendPropertyChanging();
				this._fAccount = value;
				this.SendPropertyChanged("fAccount");
				this.OnfAccountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string fPassword
	{
		get
		{
			return this._fPassword;
		}
		set
		{
			if ((this._fPassword != value))
			{
				this.OnfPasswordChanging(value);
				this.SendPropertyChanging();
				this._fPassword = value;
				this.SendPropertyChanged("fPassword");
				this.OnfPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdentity", DbType="Int NOT NULL")]
	public int fIdentity
	{
		get
		{
			return this._fIdentity;
		}
		set
		{
			if ((this._fIdentity != value))
			{
				this.OnfIdentityChanging(value);
				this.SendPropertyChanging();
				this._fIdentity = value;
				this.SendPropertyChanged("fIdentity");
				this.OnfIdentityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fPhoto", DbType="NVarChar(50)")]
	public string fPhoto
	{
		get
		{
			return this._fPhoto;
		}
		set
		{
			if ((this._fPhoto != value))
			{
				this.OnfPhotoChanging(value);
				this.SendPropertyChanging();
				this._fPhoto = value;
				this.SendPropertyChanged("fPhoto");
				this.OnfPhotoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fAddress", DbType="NVarChar(50)")]
	public string fAddress
	{
		get
		{
			return this._fAddress;
		}
		set
		{
			if ((this._fAddress != value))
			{
				this.OnfAddressChanging(value);
				this.SendPropertyChanging();
				this._fAddress = value;
				this.SendPropertyChanged("fAddress");
				this.OnfAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fEmail", DbType="NVarChar(50)")]
	public string fEmail
	{
		get
		{
			return this._fEmail;
		}
		set
		{
			if ((this._fEmail != value))
			{
				this.OnfEmailChanging(value);
				this.SendPropertyChanging();
				this._fEmail = value;
				this.SendPropertyChanged("fEmail");
				this.OnfEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fPhone", DbType="NVarChar(50)")]
	public string fPhone
	{
		get
		{
			return this._fPhone;
		}
		set
		{
			if ((this._fPhone != value))
			{
				this.OnfPhoneChanging(value);
				this.SendPropertyChanging();
				this._fPhone = value;
				this.SendPropertyChanged("fPhone");
				this.OnfPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fName", DbType="NVarChar(50)")]
	public string fName
	{
		get
		{
			return this._fName;
		}
		set
		{
			if ((this._fName != value))
			{
				this.OnfNameChanging(value);
				this.SendPropertyChanging();
				this._fName = value;
				this.SendPropertyChanged("fName");
				this.OnfNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tStores", Storage="_tStores", ThisKey="fIdMember", OtherKey="fIdStores", IsUnique=true, IsForeignKey=false)]
	public tStores tStores
	{
		get
		{
			return this._tStores.Entity;
		}
		set
		{
			tStores previousValue = this._tStores.Entity;
			if (((previousValue != value) 
						|| (this._tStores.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tStores.Entity = null;
					previousValue.tMember = null;
				}
				this._tStores.Entity = value;
				if ((value != null))
				{
					value.tMember = this;
				}
				this.SendPropertyChanged("tStores");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tAskPrice", Storage="_tAskPrice", ThisKey="fIdMember", OtherKey="fIdMember")]
	public EntitySet<tAskPrice> tAskPrice
	{
		get
		{
			return this._tAskPrice;
		}
		set
		{
			this._tAskPrice.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tChat", Storage="_tChat", ThisKey="fIdMember", OtherKey="fIdMember")]
	public EntitySet<tChat> tChat
	{
		get
		{
			return this._tChat;
		}
		set
		{
			this._tChat.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tDiscussion", Storage="_tDiscussion", ThisKey="fIdMember", OtherKey="fIdMember")]
	public EntitySet<tDiscussion> tDiscussion
	{
		get
		{
			return this._tDiscussion;
		}
		set
		{
			this._tDiscussion.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tDiscussionReply", Storage="_tDiscussionReply", ThisKey="fIdMember", OtherKey="fIdMember")]
	public EntitySet<tDiscussionReply> tDiscussionReply
	{
		get
		{
			return this._tDiscussionReply;
		}
		set
		{
			this._tDiscussionReply.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tEvaluation", Storage="_tEvaluation", ThisKey="fIdMember", OtherKey="fidMember")]
	public EntitySet<tEvaluation> tEvaluation
	{
		get
		{
			return this._tEvaluation;
		}
		set
		{
			this._tEvaluation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tLetter", Storage="_tLetter", ThisKey="fIdMember", OtherKey="fIdReceiver")]
	public EntitySet<tLetter> tLetter
	{
		get
		{
			return this._tLetter;
		}
		set
		{
			this._tLetter.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tPush", Storage="_tPush", ThisKey="fIdMember", OtherKey="fIdMember")]
	public EntitySet<tPush> tPush
	{
		get
		{
			return this._tPush;
		}
		set
		{
			this._tPush.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tLIkeServices1", Storage="_tLIkeServices1", ThisKey="fIdMember", OtherKey="fidMember")]
	public EntitySet<tLIkeServices1> tLIkeServices1
	{
		get
		{
			return this._tLIkeServices1;
		}
		set
		{
			this._tLIkeServices1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tLIkeServices", Storage="_tLIkeServices", ThisKey="fIdMember", OtherKey="fidMember")]
	public EntitySet<tLIkeServices> tLIkeServices
	{
		get
		{
			return this._tLIkeServices;
		}
		set
		{
			this._tLIkeServices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tCollection", Storage="_tCollection", ThisKey="fIdMember", OtherKey="fIdMember")]
	public EntitySet<tCollection> tCollection
	{
		get
		{
			return this._tCollection;
		}
		set
		{
			this._tCollection.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tCalendar", Storage="_tCalendar", ThisKey="fIdMember", OtherKey="fIdMember")]
	public EntitySet<tCalendar> tCalendar
	{
		get
		{
			return this._tCalendar;
		}
		set
		{
			this._tCalendar.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tAskPrice(tAskPrice entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tAskPrice(tAskPrice entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tChat(tChat entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tChat(tChat entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tDiscussion(tDiscussion entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tDiscussion(tDiscussion entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tDiscussionReply(tDiscussionReply entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tDiscussionReply(tDiscussionReply entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tEvaluation(tEvaluation entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tEvaluation(tEvaluation entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tLetter(tLetter entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tLetter(tLetter entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tPush(tPush entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tPush(tPush entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tLIkeServices1(tLIkeServices1 entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tLIkeServices1(tLIkeServices1 entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tLIkeServices(tLIkeServices entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tLIkeServices(tLIkeServices entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tCollection(tCollection entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tCollection(tCollection entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
	
	private void attach_tCalendar(tCalendar entity)
	{
		this.SendPropertyChanging();
		entity.tMember = this;
	}
	
	private void detach_tCalendar(tCalendar entity)
	{
		this.SendPropertyChanging();
		entity.tMember = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tPush")]
public partial class tPush : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdPush;
	
	private int _fIdStores;
	
	private int _fIdMember;
	
	private string _fMsg;
	
	private System.Nullable<System.DateTime> _fSendTime;
	
	private EntityRef<tMember> _tMember;
	
	private EntityRef<tStores> _tStores;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdPushChanging(int value);
    partial void OnfIdPushChanged();
    partial void OnfIdStoresChanging(int value);
    partial void OnfIdStoresChanged();
    partial void OnfIdMemberChanging(int value);
    partial void OnfIdMemberChanged();
    partial void OnfMsgChanging(string value);
    partial void OnfMsgChanged();
    partial void OnfSendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnfSendTimeChanged();
    #endregion
	
	public tPush()
	{
		this._tMember = default(EntityRef<tMember>);
		this._tStores = default(EntityRef<tStores>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdPush", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdPush
	{
		get
		{
			return this._fIdPush;
		}
		set
		{
			if ((this._fIdPush != value))
			{
				this.OnfIdPushChanging(value);
				this.SendPropertyChanging();
				this._fIdPush = value;
				this.SendPropertyChanged("fIdPush");
				this.OnfIdPushChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdStores", DbType="Int NOT NULL")]
	public int fIdStores
	{
		get
		{
			return this._fIdStores;
		}
		set
		{
			if ((this._fIdStores != value))
			{
				if (this._tStores.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdStoresChanging(value);
				this.SendPropertyChanging();
				this._fIdStores = value;
				this.SendPropertyChanged("fIdStores");
				this.OnfIdStoresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdMember", DbType="Int NOT NULL")]
	public int fIdMember
	{
		get
		{
			return this._fIdMember;
		}
		set
		{
			if ((this._fIdMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdMemberChanging(value);
				this.SendPropertyChanging();
				this._fIdMember = value;
				this.SendPropertyChanged("fIdMember");
				this.OnfIdMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fMsg", DbType="NVarChar(2000)")]
	public string fMsg
	{
		get
		{
			return this._fMsg;
		}
		set
		{
			if ((this._fMsg != value))
			{
				this.OnfMsgChanging(value);
				this.SendPropertyChanging();
				this._fMsg = value;
				this.SendPropertyChanged("fMsg");
				this.OnfMsgChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSendTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> fSendTime
	{
		get
		{
			return this._fSendTime;
		}
		set
		{
			if ((this._fSendTime != value))
			{
				this.OnfSendTimeChanging(value);
				this.SendPropertyChanging();
				this._fSendTime = value;
				this.SendPropertyChanged("fSendTime");
				this.OnfSendTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tPush", Storage="_tMember", ThisKey="fIdMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tPush.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tPush.Add(this);
					this._fIdMember = value.fIdMember;
				}
				else
				{
					this._fIdMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tPush", Storage="_tStores", ThisKey="fIdStores", OtherKey="fIdStores", IsForeignKey=true)]
	public tStores tStores
	{
		get
		{
			return this._tStores.Entity;
		}
		set
		{
			tStores previousValue = this._tStores.Entity;
			if (((previousValue != value) 
						|| (this._tStores.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tStores.Entity = null;
					previousValue.tPush.Remove(this);
				}
				this._tStores.Entity = value;
				if ((value != null))
				{
					value.tPush.Add(this);
					this._fIdStores = value.fIdStores;
				}
				else
				{
					this._fIdStores = default(int);
				}
				this.SendPropertyChanged("tStores");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tServicesClass")]
public partial class tServicesClass : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdServicesClass;
	
	private string _fName;
	
	private EntitySet<tManual> _tManual;
	
	private EntitySet<tServicesSubClass> _tServicesSubClass;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdServicesClassChanging(int value);
    partial void OnfIdServicesClassChanged();
    partial void OnfNameChanging(string value);
    partial void OnfNameChanged();
    #endregion
	
	public tServicesClass()
	{
		this._tManual = new EntitySet<tManual>(new Action<tManual>(this.attach_tManual), new Action<tManual>(this.detach_tManual));
		this._tServicesSubClass = new EntitySet<tServicesSubClass>(new Action<tServicesSubClass>(this.attach_tServicesSubClass), new Action<tServicesSubClass>(this.detach_tServicesSubClass));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdServicesClass", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdServicesClass
	{
		get
		{
			return this._fIdServicesClass;
		}
		set
		{
			if ((this._fIdServicesClass != value))
			{
				this.OnfIdServicesClassChanging(value);
				this.SendPropertyChanging();
				this._fIdServicesClass = value;
				this.SendPropertyChanged("fIdServicesClass");
				this.OnfIdServicesClassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fName", DbType="NVarChar(50)")]
	public string fName
	{
		get
		{
			return this._fName;
		}
		set
		{
			if ((this._fName != value))
			{
				this.OnfNameChanging(value);
				this.SendPropertyChanging();
				this._fName = value;
				this.SendPropertyChanged("fName");
				this.OnfNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServicesClass_tManual", Storage="_tManual", ThisKey="fIdServicesClass", OtherKey="fidServicesClass")]
	public EntitySet<tManual> tManual
	{
		get
		{
			return this._tManual;
		}
		set
		{
			this._tManual.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServicesClass_tServicesSubClass", Storage="_tServicesSubClass", ThisKey="fIdServicesClass", OtherKey="fIdServicesClass")]
	public EntitySet<tServicesSubClass> tServicesSubClass
	{
		get
		{
			return this._tServicesSubClass;
		}
		set
		{
			this._tServicesSubClass.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tManual(tManual entity)
	{
		this.SendPropertyChanging();
		entity.tServicesClass = this;
	}
	
	private void detach_tManual(tManual entity)
	{
		this.SendPropertyChanging();
		entity.tServicesClass = null;
	}
	
	private void attach_tServicesSubClass(tServicesSubClass entity)
	{
		this.SendPropertyChanging();
		entity.tServicesClass = this;
	}
	
	private void detach_tServicesSubClass(tServicesSubClass entity)
	{
		this.SendPropertyChanging();
		entity.tServicesClass = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tServicesPic")]
public partial class tServicesPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdServicesPic;
	
	private int _fIdServices;
	
	private int _fIdPhoto;
	
	private EntityRef<tGalleryPhoto> _tGalleryPhoto;
	
	private EntityRef<tServices> _tServices;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdServicesPicChanging(int value);
    partial void OnfIdServicesPicChanged();
    partial void OnfIdServicesChanging(int value);
    partial void OnfIdServicesChanged();
    partial void OnfIdPhotoChanging(int value);
    partial void OnfIdPhotoChanged();
    #endregion
	
	public tServicesPic()
	{
		this._tGalleryPhoto = default(EntityRef<tGalleryPhoto>);
		this._tServices = default(EntityRef<tServices>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdServicesPic", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdServicesPic
	{
		get
		{
			return this._fIdServicesPic;
		}
		set
		{
			if ((this._fIdServicesPic != value))
			{
				this.OnfIdServicesPicChanging(value);
				this.SendPropertyChanging();
				this._fIdServicesPic = value;
				this.SendPropertyChanged("fIdServicesPic");
				this.OnfIdServicesPicChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdServices", DbType="Int NOT NULL")]
	public int fIdServices
	{
		get
		{
			return this._fIdServices;
		}
		set
		{
			if ((this._fIdServices != value))
			{
				if (this._tServices.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdServicesChanging(value);
				this.SendPropertyChanging();
				this._fIdServices = value;
				this.SendPropertyChanged("fIdServices");
				this.OnfIdServicesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdPhoto", DbType="Int NOT NULL")]
	public int fIdPhoto
	{
		get
		{
			return this._fIdPhoto;
		}
		set
		{
			if ((this._fIdPhoto != value))
			{
				if (this._tGalleryPhoto.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdPhotoChanging(value);
				this.SendPropertyChanging();
				this._fIdPhoto = value;
				this.SendPropertyChanged("fIdPhoto");
				this.OnfIdPhotoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tGalleryPhoto_tServicesPic", Storage="_tGalleryPhoto", ThisKey="fIdPhoto", OtherKey="fIdPhoto", IsForeignKey=true)]
	public tGalleryPhoto tGalleryPhoto
	{
		get
		{
			return this._tGalleryPhoto.Entity;
		}
		set
		{
			tGalleryPhoto previousValue = this._tGalleryPhoto.Entity;
			if (((previousValue != value) 
						|| (this._tGalleryPhoto.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tGalleryPhoto.Entity = null;
					previousValue.tServicesPic.Remove(this);
				}
				this._tGalleryPhoto.Entity = value;
				if ((value != null))
				{
					value.tServicesPic.Add(this);
					this._fIdPhoto = value.fIdPhoto;
				}
				else
				{
					this._fIdPhoto = default(int);
				}
				this.SendPropertyChanged("tGalleryPhoto");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServices_tServicesPic", Storage="_tServices", ThisKey="fIdServices", OtherKey="fIdServices", IsForeignKey=true)]
	public tServices tServices
	{
		get
		{
			return this._tServices.Entity;
		}
		set
		{
			tServices previousValue = this._tServices.Entity;
			if (((previousValue != value) 
						|| (this._tServices.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tServices.Entity = null;
					previousValue.tServicesPic.Remove(this);
				}
				this._tServices.Entity = value;
				if ((value != null))
				{
					value.tServicesPic.Add(this);
					this._fIdServices = value.fIdServices;
				}
				else
				{
					this._fIdServices = default(int);
				}
				this.SendPropertyChanged("tServices");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tServicesSubClass")]
public partial class tServicesSubClass : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdServicesSubClass;
	
	private int _fIdServicesClass;
	
	private string _fName;
	
	private EntitySet<tServices> _tServices;
	
	private EntityRef<tServicesClass> _tServicesClass;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdServicesSubClassChanging(int value);
    partial void OnfIdServicesSubClassChanged();
    partial void OnfIdServicesClassChanging(int value);
    partial void OnfIdServicesClassChanged();
    partial void OnfNameChanging(string value);
    partial void OnfNameChanged();
    #endregion
	
	public tServicesSubClass()
	{
		this._tServices = new EntitySet<tServices>(new Action<tServices>(this.attach_tServices), new Action<tServices>(this.detach_tServices));
		this._tServicesClass = default(EntityRef<tServicesClass>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdServicesSubClass", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdServicesSubClass
	{
		get
		{
			return this._fIdServicesSubClass;
		}
		set
		{
			if ((this._fIdServicesSubClass != value))
			{
				this.OnfIdServicesSubClassChanging(value);
				this.SendPropertyChanging();
				this._fIdServicesSubClass = value;
				this.SendPropertyChanged("fIdServicesSubClass");
				this.OnfIdServicesSubClassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdServicesClass", DbType="Int NOT NULL")]
	public int fIdServicesClass
	{
		get
		{
			return this._fIdServicesClass;
		}
		set
		{
			if ((this._fIdServicesClass != value))
			{
				if (this._tServicesClass.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdServicesClassChanging(value);
				this.SendPropertyChanging();
				this._fIdServicesClass = value;
				this.SendPropertyChanged("fIdServicesClass");
				this.OnfIdServicesClassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fName", DbType="NVarChar(50)")]
	public string fName
	{
		get
		{
			return this._fName;
		}
		set
		{
			if ((this._fName != value))
			{
				this.OnfNameChanging(value);
				this.SendPropertyChanging();
				this._fName = value;
				this.SendPropertyChanged("fName");
				this.OnfNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServicesSubClass_tServices", Storage="_tServices", ThisKey="fIdServicesSubClass", OtherKey="fIdSubServicesClass")]
	public EntitySet<tServices> tServices
	{
		get
		{
			return this._tServices;
		}
		set
		{
			this._tServices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServicesClass_tServicesSubClass", Storage="_tServicesClass", ThisKey="fIdServicesClass", OtherKey="fIdServicesClass", IsForeignKey=true)]
	public tServicesClass tServicesClass
	{
		get
		{
			return this._tServicesClass.Entity;
		}
		set
		{
			tServicesClass previousValue = this._tServicesClass.Entity;
			if (((previousValue != value) 
						|| (this._tServicesClass.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tServicesClass.Entity = null;
					previousValue.tServicesSubClass.Remove(this);
				}
				this._tServicesClass.Entity = value;
				if ((value != null))
				{
					value.tServicesSubClass.Add(this);
					this._fIdServicesClass = value.fIdServicesClass;
				}
				else
				{
					this._fIdServicesClass = default(int);
				}
				this.SendPropertyChanged("tServicesClass");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tServices(tServices entity)
	{
		this.SendPropertyChanging();
		entity.tServicesSubClass = this;
	}
	
	private void detach_tServices(tServices entity)
	{
		this.SendPropertyChanging();
		entity.tServicesSubClass = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tLIkeServices")]
public partial class tLIkeServices1 : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fidLIkeServices;
	
	private int _fidMember;
	
	private int _fidServices;
	
	private System.Nullable<int> _flikeStar;
	
	private EntityRef<tMember> _tMember;
	
	private EntityRef<tServices> _tServices;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfidLIkeServicesChanging(int value);
    partial void OnfidLIkeServicesChanged();
    partial void OnfidMemberChanging(int value);
    partial void OnfidMemberChanged();
    partial void OnfidServicesChanging(int value);
    partial void OnfidServicesChanged();
    partial void OnflikeStarChanging(System.Nullable<int> value);
    partial void OnflikeStarChanged();
    #endregion
	
	public tLIkeServices1()
	{
		this._tMember = default(EntityRef<tMember>);
		this._tServices = default(EntityRef<tServices>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidLIkeServices", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fidLIkeServices
	{
		get
		{
			return this._fidLIkeServices;
		}
		set
		{
			if ((this._fidLIkeServices != value))
			{
				this.OnfidLIkeServicesChanging(value);
				this.SendPropertyChanging();
				this._fidLIkeServices = value;
				this.SendPropertyChanged("fidLIkeServices");
				this.OnfidLIkeServicesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidMember", DbType="Int NOT NULL")]
	public int fidMember
	{
		get
		{
			return this._fidMember;
		}
		set
		{
			if ((this._fidMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfidMemberChanging(value);
				this.SendPropertyChanging();
				this._fidMember = value;
				this.SendPropertyChanged("fidMember");
				this.OnfidMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidServices", DbType="Int NOT NULL")]
	public int fidServices
	{
		get
		{
			return this._fidServices;
		}
		set
		{
			if ((this._fidServices != value))
			{
				if (this._tServices.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfidServicesChanging(value);
				this.SendPropertyChanging();
				this._fidServices = value;
				this.SendPropertyChanged("fidServices");
				this.OnfidServicesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flikeStar", DbType="Int")]
	public System.Nullable<int> flikeStar
	{
		get
		{
			return this._flikeStar;
		}
		set
		{
			if ((this._flikeStar != value))
			{
				this.OnflikeStarChanging(value);
				this.SendPropertyChanging();
				this._flikeStar = value;
				this.SendPropertyChanged("flikeStar");
				this.OnflikeStarChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tLIkeServices1", Storage="_tMember", ThisKey="fidMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tLIkeServices1.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tLIkeServices1.Add(this);
					this._fidMember = value.fIdMember;
				}
				else
				{
					this._fidMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServices_tLIkeServices1", Storage="_tServices", ThisKey="fidServices", OtherKey="fIdServices", IsForeignKey=true)]
	public tServices tServices
	{
		get
		{
			return this._tServices.Entity;
		}
		set
		{
			tServices previousValue = this._tServices.Entity;
			if (((previousValue != value) 
						|| (this._tServices.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tServices.Entity = null;
					previousValue.tLIkeServices1.Remove(this);
				}
				this._tServices.Entity = value;
				if ((value != null))
				{
					value.tLIkeServices1.Add(this);
					this._fidServices = value.fIdServices;
				}
				else
				{
					this._fidServices = default(int);
				}
				this.SendPropertyChanged("tServices");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tLIkeServices")]
public partial class tLIkeServices : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fidLIkeServices;
	
	private int _fidMember;
	
	private int _fidServices;
	
	private EntityRef<tMember> _tMember;
	
	private EntityRef<tServices> _tServices;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfidLIkeServicesChanging(int value);
    partial void OnfidLIkeServicesChanged();
    partial void OnfidMemberChanging(int value);
    partial void OnfidMemberChanged();
    partial void OnfidServicesChanging(int value);
    partial void OnfidServicesChanged();
    #endregion
	
	public tLIkeServices()
	{
		this._tMember = default(EntityRef<tMember>);
		this._tServices = default(EntityRef<tServices>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidLIkeServices", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fidLIkeServices
	{
		get
		{
			return this._fidLIkeServices;
		}
		set
		{
			if ((this._fidLIkeServices != value))
			{
				this.OnfidLIkeServicesChanging(value);
				this.SendPropertyChanging();
				this._fidLIkeServices = value;
				this.SendPropertyChanged("fidLIkeServices");
				this.OnfidLIkeServicesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidMember", DbType="Int NOT NULL")]
	public int fidMember
	{
		get
		{
			return this._fidMember;
		}
		set
		{
			if ((this._fidMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfidMemberChanging(value);
				this.SendPropertyChanging();
				this._fidMember = value;
				this.SendPropertyChanged("fidMember");
				this.OnfidMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fidServices", DbType="Int NOT NULL")]
	public int fidServices
	{
		get
		{
			return this._fidServices;
		}
		set
		{
			if ((this._fidServices != value))
			{
				if (this._tServices.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfidServicesChanging(value);
				this.SendPropertyChanging();
				this._fidServices = value;
				this.SendPropertyChanged("fidServices");
				this.OnfidServicesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tLIkeServices", Storage="_tMember", ThisKey="fidMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tLIkeServices.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tLIkeServices.Add(this);
					this._fidMember = value.fIdMember;
				}
				else
				{
					this._fidMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServices_tLIkeServices", Storage="_tServices", ThisKey="fidServices", OtherKey="fIdServices", IsForeignKey=true)]
	public tServices tServices
	{
		get
		{
			return this._tServices.Entity;
		}
		set
		{
			tServices previousValue = this._tServices.Entity;
			if (((previousValue != value) 
						|| (this._tServices.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tServices.Entity = null;
					previousValue.tLIkeServices.Remove(this);
				}
				this._tServices.Entity = value;
				if ((value != null))
				{
					value.tLIkeServices.Add(this);
					this._fidServices = value.fIdServices;
				}
				else
				{
					this._fidServices = default(int);
				}
				this.SendPropertyChanged("tServices");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tCollection")]
public partial class tCollection : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdCollectionStores;
	
	private int _fIdMember;
	
	private int _fIdStores;
	
	private EntityRef<tMember> _tMember;
	
	private EntityRef<tStores> _tStores;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdCollectionStoresChanging(int value);
    partial void OnfIdCollectionStoresChanged();
    partial void OnfIdMemberChanging(int value);
    partial void OnfIdMemberChanged();
    partial void OnfIdStoresChanging(int value);
    partial void OnfIdStoresChanged();
    #endregion
	
	public tCollection()
	{
		this._tMember = default(EntityRef<tMember>);
		this._tStores = default(EntityRef<tStores>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdCollectionStores", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdCollectionStores
	{
		get
		{
			return this._fIdCollectionStores;
		}
		set
		{
			if ((this._fIdCollectionStores != value))
			{
				this.OnfIdCollectionStoresChanging(value);
				this.SendPropertyChanging();
				this._fIdCollectionStores = value;
				this.SendPropertyChanged("fIdCollectionStores");
				this.OnfIdCollectionStoresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdMember", DbType="Int NOT NULL")]
	public int fIdMember
	{
		get
		{
			return this._fIdMember;
		}
		set
		{
			if ((this._fIdMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdMemberChanging(value);
				this.SendPropertyChanging();
				this._fIdMember = value;
				this.SendPropertyChanged("fIdMember");
				this.OnfIdMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdStores", DbType="Int NOT NULL")]
	public int fIdStores
	{
		get
		{
			return this._fIdStores;
		}
		set
		{
			if ((this._fIdStores != value))
			{
				if (this._tStores.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdStoresChanging(value);
				this.SendPropertyChanging();
				this._fIdStores = value;
				this.SendPropertyChanged("fIdStores");
				this.OnfIdStoresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tCollection", Storage="_tMember", ThisKey="fIdMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tCollection.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tCollection.Add(this);
					this._fIdMember = value.fIdMember;
				}
				else
				{
					this._fIdMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tCollection", Storage="_tStores", ThisKey="fIdStores", OtherKey="fIdStores", IsForeignKey=true)]
	public tStores tStores
	{
		get
		{
			return this._tStores.Entity;
		}
		set
		{
			tStores previousValue = this._tStores.Entity;
			if (((previousValue != value) 
						|| (this._tStores.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tStores.Entity = null;
					previousValue.tCollection.Remove(this);
				}
				this._tStores.Entity = value;
				if ((value != null))
				{
					value.tCollection.Add(this);
					this._fIdStores = value.fIdStores;
				}
				else
				{
					this._fIdStores = default(int);
				}
				this.SendPropertyChanged("tStores");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tCalendar")]
public partial class tCalendar : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdCalendar;
	
	private int _fIdMember;
	
	private int _fIdStores;
	
	private int _fIdServices;
	
	private System.Nullable<System.DateTime> _fDate;
	
	private System.Nullable<bool> _fAccepted;
	
	private string _fOK;
	
	private EntityRef<tMember> _tMember;
	
	private EntityRef<tStores> _tStores;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdCalendarChanging(int value);
    partial void OnfIdCalendarChanged();
    partial void OnfIdMemberChanging(int value);
    partial void OnfIdMemberChanged();
    partial void OnfIdStoresChanging(int value);
    partial void OnfIdStoresChanged();
    partial void OnfIdServicesChanging(int value);
    partial void OnfIdServicesChanged();
    partial void OnfDateChanging(System.Nullable<System.DateTime> value);
    partial void OnfDateChanged();
    partial void OnfAcceptedChanging(System.Nullable<bool> value);
    partial void OnfAcceptedChanged();
    partial void OnfOKChanging(string value);
    partial void OnfOKChanged();
    #endregion
	
	public tCalendar()
	{
		this._tMember = default(EntityRef<tMember>);
		this._tStores = default(EntityRef<tStores>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdCalendar", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdCalendar
	{
		get
		{
			return this._fIdCalendar;
		}
		set
		{
			if ((this._fIdCalendar != value))
			{
				this.OnfIdCalendarChanging(value);
				this.SendPropertyChanging();
				this._fIdCalendar = value;
				this.SendPropertyChanged("fIdCalendar");
				this.OnfIdCalendarChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdMember", DbType="Int NOT NULL")]
	public int fIdMember
	{
		get
		{
			return this._fIdMember;
		}
		set
		{
			if ((this._fIdMember != value))
			{
				if (this._tMember.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdMemberChanging(value);
				this.SendPropertyChanging();
				this._fIdMember = value;
				this.SendPropertyChanged("fIdMember");
				this.OnfIdMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdStores", DbType="Int NOT NULL")]
	public int fIdStores
	{
		get
		{
			return this._fIdStores;
		}
		set
		{
			if ((this._fIdStores != value))
			{
				if (this._tStores.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdStoresChanging(value);
				this.SendPropertyChanging();
				this._fIdStores = value;
				this.SendPropertyChanged("fIdStores");
				this.OnfIdStoresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdServices", DbType="Int NOT NULL")]
	public int fIdServices
	{
		get
		{
			return this._fIdServices;
		}
		set
		{
			if ((this._fIdServices != value))
			{
				this.OnfIdServicesChanging(value);
				this.SendPropertyChanging();
				this._fIdServices = value;
				this.SendPropertyChanged("fIdServices");
				this.OnfIdServicesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fDate", DbType="Date")]
	public System.Nullable<System.DateTime> fDate
	{
		get
		{
			return this._fDate;
		}
		set
		{
			if ((this._fDate != value))
			{
				this.OnfDateChanging(value);
				this.SendPropertyChanging();
				this._fDate = value;
				this.SendPropertyChanged("fDate");
				this.OnfDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fAccepted", DbType="Bit")]
	public System.Nullable<bool> fAccepted
	{
		get
		{
			return this._fAccepted;
		}
		set
		{
			if ((this._fAccepted != value))
			{
				this.OnfAcceptedChanging(value);
				this.SendPropertyChanging();
				this._fAccepted = value;
				this.SendPropertyChanged("fAccepted");
				this.OnfAcceptedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fOK", DbType="NVarChar(10)")]
	public string fOK
	{
		get
		{
			return this._fOK;
		}
		set
		{
			if ((this._fOK != value))
			{
				this.OnfOKChanging(value);
				this.SendPropertyChanging();
				this._fOK = value;
				this.SendPropertyChanged("fOK");
				this.OnfOKChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tMember_tCalendar", Storage="_tMember", ThisKey="fIdMember", OtherKey="fIdMember", IsForeignKey=true)]
	public tMember tMember
	{
		get
		{
			return this._tMember.Entity;
		}
		set
		{
			tMember previousValue = this._tMember.Entity;
			if (((previousValue != value) 
						|| (this._tMember.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tMember.Entity = null;
					previousValue.tCalendar.Remove(this);
				}
				this._tMember.Entity = value;
				if ((value != null))
				{
					value.tCalendar.Add(this);
					this._fIdMember = value.fIdMember;
				}
				else
				{
					this._fIdMember = default(int);
				}
				this.SendPropertyChanged("tMember");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tCalendar", Storage="_tStores", ThisKey="fIdStores", OtherKey="fIdStores", IsForeignKey=true)]
	public tStores tStores
	{
		get
		{
			return this._tStores.Entity;
		}
		set
		{
			tStores previousValue = this._tStores.Entity;
			if (((previousValue != value) 
						|| (this._tStores.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tStores.Entity = null;
					previousValue.tCalendar.Remove(this);
				}
				this._tStores.Entity = value;
				if ((value != null))
				{
					value.tCalendar.Add(this);
					this._fIdStores = value.fIdStores;
				}
				else
				{
					this._fIdStores = default(int);
				}
				this.SendPropertyChanged("tStores");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tGallery")]
public partial class tGallery : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdGallery;
	
	private string _fName;
	
	private int _fIdServicesSubClass;
	
	private string _fDescription;
	
	private System.Nullable<System.DateTime> _fUploadTime;
	
	private System.Nullable<int> _fIdPhotoCover;
	
	private int _fIdStores;
	
	private string _fDelete;
	
	private EntitySet<tGalleryPhoto> _tGalleryPhoto;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdGalleryChanging(int value);
    partial void OnfIdGalleryChanged();
    partial void OnfNameChanging(string value);
    partial void OnfNameChanged();
    partial void OnfIdServicesSubClassChanging(int value);
    partial void OnfIdServicesSubClassChanged();
    partial void OnfDescriptionChanging(string value);
    partial void OnfDescriptionChanged();
    partial void OnfUploadTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnfUploadTimeChanged();
    partial void OnfIdPhotoCoverChanging(System.Nullable<int> value);
    partial void OnfIdPhotoCoverChanged();
    partial void OnfIdStoresChanging(int value);
    partial void OnfIdStoresChanged();
    partial void OnfDeleteChanging(string value);
    partial void OnfDeleteChanged();
    #endregion
	
	public tGallery()
	{
		this._tGalleryPhoto = new EntitySet<tGalleryPhoto>(new Action<tGalleryPhoto>(this.attach_tGalleryPhoto), new Action<tGalleryPhoto>(this.detach_tGalleryPhoto));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdGallery", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdGallery
	{
		get
		{
			return this._fIdGallery;
		}
		set
		{
			if ((this._fIdGallery != value))
			{
				this.OnfIdGalleryChanging(value);
				this.SendPropertyChanging();
				this._fIdGallery = value;
				this.SendPropertyChanged("fIdGallery");
				this.OnfIdGalleryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fName", DbType="NVarChar(50)")]
	public string fName
	{
		get
		{
			return this._fName;
		}
		set
		{
			if ((this._fName != value))
			{
				this.OnfNameChanging(value);
				this.SendPropertyChanging();
				this._fName = value;
				this.SendPropertyChanged("fName");
				this.OnfNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdServicesSubClass", DbType="Int NOT NULL")]
	public int fIdServicesSubClass
	{
		get
		{
			return this._fIdServicesSubClass;
		}
		set
		{
			if ((this._fIdServicesSubClass != value))
			{
				this.OnfIdServicesSubClassChanging(value);
				this.SendPropertyChanging();
				this._fIdServicesSubClass = value;
				this.SendPropertyChanged("fIdServicesSubClass");
				this.OnfIdServicesSubClassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fDescription", DbType="NVarChar(50)")]
	public string fDescription
	{
		get
		{
			return this._fDescription;
		}
		set
		{
			if ((this._fDescription != value))
			{
				this.OnfDescriptionChanging(value);
				this.SendPropertyChanging();
				this._fDescription = value;
				this.SendPropertyChanged("fDescription");
				this.OnfDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fUploadTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> fUploadTime
	{
		get
		{
			return this._fUploadTime;
		}
		set
		{
			if ((this._fUploadTime != value))
			{
				this.OnfUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._fUploadTime = value;
				this.SendPropertyChanged("fUploadTime");
				this.OnfUploadTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdPhotoCover", DbType="Int")]
	public System.Nullable<int> fIdPhotoCover
	{
		get
		{
			return this._fIdPhotoCover;
		}
		set
		{
			if ((this._fIdPhotoCover != value))
			{
				this.OnfIdPhotoCoverChanging(value);
				this.SendPropertyChanging();
				this._fIdPhotoCover = value;
				this.SendPropertyChanged("fIdPhotoCover");
				this.OnfIdPhotoCoverChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdStores", DbType="Int NOT NULL")]
	public int fIdStores
	{
		get
		{
			return this._fIdStores;
		}
		set
		{
			if ((this._fIdStores != value))
			{
				this.OnfIdStoresChanging(value);
				this.SendPropertyChanging();
				this._fIdStores = value;
				this.SendPropertyChanged("fIdStores");
				this.OnfIdStoresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fDelete", DbType="NVarChar(10)")]
	public string fDelete
	{
		get
		{
			return this._fDelete;
		}
		set
		{
			if ((this._fDelete != value))
			{
				this.OnfDeleteChanging(value);
				this.SendPropertyChanging();
				this._fDelete = value;
				this.SendPropertyChanged("fDelete");
				this.OnfDeleteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tGallery_tGalleryPhoto", Storage="_tGalleryPhoto", ThisKey="fIdGallery", OtherKey="fIdGallery")]
	public EntitySet<tGalleryPhoto> tGalleryPhoto
	{
		get
		{
			return this._tGalleryPhoto;
		}
		set
		{
			this._tGalleryPhoto.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tGalleryPhoto(tGalleryPhoto entity)
	{
		this.SendPropertyChanging();
		entity.tGallery = this;
	}
	
	private void detach_tGalleryPhoto(tGalleryPhoto entity)
	{
		this.SendPropertyChanging();
		entity.tGallery = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tServices")]
public partial class tServices : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _fIdServices;
	
	private int _fIdSubServicesClass;
	
	private string _fName;
	
	private System.Nullable<int> _fMaxMoney;
	
	private System.Nullable<int> _fMinMoney;
	
	private string _fDescription;
	
	private int _fIdStores;
	
	private System.Nullable<System.DateTime> _fUploadTime;
	
	private string _fContent;
	
	private string _fDelete;
	
	private EntitySet<tServicesPic> _tServicesPic;
	
	private EntitySet<tLIkeServices1> _tLIkeServices1;
	
	private EntitySet<tLIkeServices> _tLIkeServices;
	
	private EntityRef<tServicesSubClass> _tServicesSubClass;
	
	private EntityRef<tStores> _tStores;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfIdServicesChanging(int value);
    partial void OnfIdServicesChanged();
    partial void OnfIdSubServicesClassChanging(int value);
    partial void OnfIdSubServicesClassChanged();
    partial void OnfNameChanging(string value);
    partial void OnfNameChanged();
    partial void OnfMaxMoneyChanging(System.Nullable<int> value);
    partial void OnfMaxMoneyChanged();
    partial void OnfMinMoneyChanging(System.Nullable<int> value);
    partial void OnfMinMoneyChanged();
    partial void OnfDescriptionChanging(string value);
    partial void OnfDescriptionChanged();
    partial void OnfIdStoresChanging(int value);
    partial void OnfIdStoresChanged();
    partial void OnfUploadTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnfUploadTimeChanged();
    partial void OnfContentChanging(string value);
    partial void OnfContentChanged();
    partial void OnfDeleteChanging(string value);
    partial void OnfDeleteChanged();
    #endregion
	
	public tServices()
	{
		this._tServicesPic = new EntitySet<tServicesPic>(new Action<tServicesPic>(this.attach_tServicesPic), new Action<tServicesPic>(this.detach_tServicesPic));
		this._tLIkeServices1 = new EntitySet<tLIkeServices1>(new Action<tLIkeServices1>(this.attach_tLIkeServices1), new Action<tLIkeServices1>(this.detach_tLIkeServices1));
		this._tLIkeServices = new EntitySet<tLIkeServices>(new Action<tLIkeServices>(this.attach_tLIkeServices), new Action<tLIkeServices>(this.detach_tLIkeServices));
		this._tServicesSubClass = default(EntityRef<tServicesSubClass>);
		this._tStores = default(EntityRef<tStores>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdServices", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int fIdServices
	{
		get
		{
			return this._fIdServices;
		}
		set
		{
			if ((this._fIdServices != value))
			{
				this.OnfIdServicesChanging(value);
				this.SendPropertyChanging();
				this._fIdServices = value;
				this.SendPropertyChanged("fIdServices");
				this.OnfIdServicesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdSubServicesClass", DbType="Int NOT NULL")]
	public int fIdSubServicesClass
	{
		get
		{
			return this._fIdSubServicesClass;
		}
		set
		{
			if ((this._fIdSubServicesClass != value))
			{
				if (this._tServicesSubClass.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdSubServicesClassChanging(value);
				this.SendPropertyChanging();
				this._fIdSubServicesClass = value;
				this.SendPropertyChanged("fIdSubServicesClass");
				this.OnfIdSubServicesClassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string fName
	{
		get
		{
			return this._fName;
		}
		set
		{
			if ((this._fName != value))
			{
				this.OnfNameChanging(value);
				this.SendPropertyChanging();
				this._fName = value;
				this.SendPropertyChanged("fName");
				this.OnfNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fMaxMoney", DbType="Int")]
	public System.Nullable<int> fMaxMoney
	{
		get
		{
			return this._fMaxMoney;
		}
		set
		{
			if ((this._fMaxMoney != value))
			{
				this.OnfMaxMoneyChanging(value);
				this.SendPropertyChanging();
				this._fMaxMoney = value;
				this.SendPropertyChanged("fMaxMoney");
				this.OnfMaxMoneyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fMinMoney", DbType="Int")]
	public System.Nullable<int> fMinMoney
	{
		get
		{
			return this._fMinMoney;
		}
		set
		{
			if ((this._fMinMoney != value))
			{
				this.OnfMinMoneyChanging(value);
				this.SendPropertyChanging();
				this._fMinMoney = value;
				this.SendPropertyChanged("fMinMoney");
				this.OnfMinMoneyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fDescription", DbType="NVarChar(50)")]
	public string fDescription
	{
		get
		{
			return this._fDescription;
		}
		set
		{
			if ((this._fDescription != value))
			{
				this.OnfDescriptionChanging(value);
				this.SendPropertyChanging();
				this._fDescription = value;
				this.SendPropertyChanged("fDescription");
				this.OnfDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fIdStores", DbType="Int NOT NULL")]
	public int fIdStores
	{
		get
		{
			return this._fIdStores;
		}
		set
		{
			if ((this._fIdStores != value))
			{
				if (this._tStores.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnfIdStoresChanging(value);
				this.SendPropertyChanging();
				this._fIdStores = value;
				this.SendPropertyChanged("fIdStores");
				this.OnfIdStoresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fUploadTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> fUploadTime
	{
		get
		{
			return this._fUploadTime;
		}
		set
		{
			if ((this._fUploadTime != value))
			{
				this.OnfUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._fUploadTime = value;
				this.SendPropertyChanged("fUploadTime");
				this.OnfUploadTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fContent", DbType="NVarChar(1000)")]
	public string fContent
	{
		get
		{
			return this._fContent;
		}
		set
		{
			if ((this._fContent != value))
			{
				this.OnfContentChanging(value);
				this.SendPropertyChanging();
				this._fContent = value;
				this.SendPropertyChanged("fContent");
				this.OnfContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fDelete", DbType="NVarChar(10)")]
	public string fDelete
	{
		get
		{
			return this._fDelete;
		}
		set
		{
			if ((this._fDelete != value))
			{
				this.OnfDeleteChanging(value);
				this.SendPropertyChanging();
				this._fDelete = value;
				this.SendPropertyChanged("fDelete");
				this.OnfDeleteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServices_tServicesPic", Storage="_tServicesPic", ThisKey="fIdServices", OtherKey="fIdServices")]
	public EntitySet<tServicesPic> tServicesPic
	{
		get
		{
			return this._tServicesPic;
		}
		set
		{
			this._tServicesPic.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServices_tLIkeServices1", Storage="_tLIkeServices1", ThisKey="fIdServices", OtherKey="fidServices")]
	public EntitySet<tLIkeServices1> tLIkeServices1
	{
		get
		{
			return this._tLIkeServices1;
		}
		set
		{
			this._tLIkeServices1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServices_tLIkeServices", Storage="_tLIkeServices", ThisKey="fIdServices", OtherKey="fidServices")]
	public EntitySet<tLIkeServices> tLIkeServices
	{
		get
		{
			return this._tLIkeServices;
		}
		set
		{
			this._tLIkeServices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tServicesSubClass_tServices", Storage="_tServicesSubClass", ThisKey="fIdSubServicesClass", OtherKey="fIdServicesSubClass", IsForeignKey=true)]
	public tServicesSubClass tServicesSubClass
	{
		get
		{
			return this._tServicesSubClass.Entity;
		}
		set
		{
			tServicesSubClass previousValue = this._tServicesSubClass.Entity;
			if (((previousValue != value) 
						|| (this._tServicesSubClass.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tServicesSubClass.Entity = null;
					previousValue.tServices.Remove(this);
				}
				this._tServicesSubClass.Entity = value;
				if ((value != null))
				{
					value.tServices.Add(this);
					this._fIdSubServicesClass = value.fIdServicesSubClass;
				}
				else
				{
					this._fIdSubServicesClass = default(int);
				}
				this.SendPropertyChanged("tServicesSubClass");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tStores_tServices", Storage="_tStores", ThisKey="fIdStores", OtherKey="fIdStores", IsForeignKey=true)]
	public tStores tStores
	{
		get
		{
			return this._tStores.Entity;
		}
		set
		{
			tStores previousValue = this._tStores.Entity;
			if (((previousValue != value) 
						|| (this._tStores.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tStores.Entity = null;
					previousValue.tServices.Remove(this);
				}
				this._tStores.Entity = value;
				if ((value != null))
				{
					value.tServices.Add(this);
					this._fIdStores = value.fIdStores;
				}
				else
				{
					this._fIdStores = default(int);
				}
				this.SendPropertyChanged("tStores");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tServicesPic(tServicesPic entity)
	{
		this.SendPropertyChanging();
		entity.tServices = this;
	}
	
	private void detach_tServicesPic(tServicesPic entity)
	{
		this.SendPropertyChanging();
		entity.tServices = null;
	}
	
	private void attach_tLIkeServices1(tLIkeServices1 entity)
	{
		this.SendPropertyChanging();
		entity.tServices = this;
	}
	
	private void detach_tLIkeServices1(tLIkeServices1 entity)
	{
		this.SendPropertyChanging();
		entity.tServices = null;
	}
	
	private void attach_tLIkeServices(tLIkeServices entity)
	{
		this.SendPropertyChanging();
		entity.tServices = this;
	}
	
	private void detach_tLIkeServices(tLIkeServices entity)
	{
		this.SendPropertyChanging();
		entity.tServices = null;
	}
}
#pragma warning restore 1591
